@{
    ViewData["Title"] = "Home Page";
    var analysisResult = Context.Session.GetString("AnalysisResult");
    var analysisError = Context.Session.GetString("AnalysisError");
    var analysisId = Context.Session.GetString("AnalysisId");
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    
    <!-- Debug info for development -->
    <script>
        console.log('üìä Session Debug Info:');
        console.log('Analysis ID: @(analysisId ?? "null")');
        console.log('Analysis Result: @(analysisResult ?? "null")');
        console.log('Analysis Error: @(analysisError ?? "null")');
        
        // Set global analysis ID for view switching
        @if (!string.IsNullOrEmpty(analysisId))
        {
            <text>
            window.currentAnalysisId = '@analysisId';
            console.log('üÜî Set window.currentAnalysisId to:', window.currentAnalysisId);
            </text>
        }
    </script>
    
    @if (ViewBag.BranchInfo != null)
    {
        <div class="git-status">
            @if (ViewBag.IsError)
            {
                <div class="alert alert-warning" role="alert">
                    ‚ö†Ô∏è @ViewBag.BranchInfo
                </div>
            }
            else
            {
                <div class="alert alert-success" role="alert">
                    üåø Current branch: <strong>@ViewBag.BranchInfo</strong>
                </div>
            }
        </div>
    }
    
    <!-- Repository Path Section -->
    <div class="repository-section mt-4">
        <h5>üìÅ Git Repository</h5>
        
        <!-- Repository Path Configuration -->
        <div class="mb-3">
            <form asp-action="SetRepositoryPath" method="post">
                <div class="input-group">
                    <input type="text" class="form-control" name="repositoryPath"
                           placeholder="Repository path"
                           value="@ViewBag.RepositoryPath">
                    <button class="btn btn-outline-secondary" type="submit">Set Repository</button>
                </div>
            </form>
        </div>
        
        <!-- Git Diff Display -->
        @if (ViewBag.GitDiff != null)
        {
            <div class="git-diff-section">
                @if (ViewBag.GitDiffError)
                {
                    <div class="alert alert-warning">
                        ‚ö†Ô∏è @ViewBag.GitDiff
                    </div>
                }
                else
                {
                    <div class="card">
                        <div class="card-header bg-info text-white">
                            <h6 class="mb-0">
                                <button class="btn btn-link text-white" type="button" data-bs-toggle="collapse" data-bs-target="#gitDiffCollapse">
                                    üìä Git Changes (Click to expand/collapse)
                                </button>
                            </h6>
                        </div>
                        <div class="collapse" id="gitDiffCollapse">
                            <div class="card-body">
                                <pre class="git-diff-text" style="white-space: pre-wrap; font-family: monospace; font-size: 0.8em; max-height: 300px; overflow-y: auto;">@ViewBag.GitDiff</pre>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
    
    <!-- Document Management Section -->
    <div class="document-section mt-5">
        <h5>üìÅ Requirements Documents</h5>
        
        <!-- Folder Configuration -->
        <div class="mb-3">
            <form asp-action="SetDocumentsFolder" method="post">
                <div class="input-group">
                    <input type="text" class="form-control" name="folderPath"
                           placeholder="Documents folder path"
                           value="@ViewBag.DocumentsFolder">
                    <button class="btn btn-outline-secondary" type="submit">Set Folder</button>
                </div>
            </form>
        </div>
        
        <!-- Document Selection -->
        @if (ViewBag.AvailableDocuments.Count > 0)
        {
            <form asp-action="SelectDocuments" method="post">
                <div class="mb-3">
                    <label>Select coding standards:</label>
                    @foreach (var doc in ViewBag.AvailableDocuments)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox"
                                   name="selectedDocuments" value="@doc"
                                   @(ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Contains(doc) ? "checked" : "")>
                            <label class="form-check-label">@DocumentService.GetDocumentDisplayName(doc)</label>
                        </div>
                    }
                </div>
                <button type="submit" class="btn btn-primary">Apply Selection</button>
            </form>
        }
        else if (!string.IsNullOrEmpty(ViewBag.DocumentsFolder))
        {
            <div class="alert alert-info">
                üìã No .md documents found in folder
            </div>
        }
        
        <!-- Selected Documents Summary -->
        @if (ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Count > 0)
        {
            <div class="alert alert-success mt-3">
                ‚úÖ Selected: <strong>@string.Join(", ", ((List<string>)ViewBag.SelectedDocuments).Select(doc => DocumentService.GetDocumentDisplayName(doc)))</strong>
            </div>
        }
        
        <!-- Document Scan Error -->
        @if (ViewBag.DocumentScanError != null)
        {
            <div class="alert alert-warning mt-3">
                ‚ö†Ô∏è @ViewBag.DocumentScanError
            </div>
        }
    </div>
    
    <!-- Language Selection Section -->
    <div class="language-section mt-5">
        <h5>üêç Programming Language</h5>
        <div class="mb-3">
            <label for="languageSelect" class="form-label">Select the programming language for analysis:</label>
            <select class="form-select" id="languageSelect" name="language">
                <option value=".NET" selected>.NET</option>
                <option value="Python">Python</option>
            </select>
        </div>
    </div>
    
    <!-- AI Analysis Section -->
    <div class="analysis-section mt-5">
        <h5>ü§ñ AI Code Analysis</h5>
        
        <!-- Progress Container -->
        <div id="progressContainer" style="display: none;" class="mt-4">
            <div class="alert alert-info">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
                    <span id="progressMessage">Starting analysis...</span>
                </div>
            </div>
            <div class="mt-3">
                <div class="fw-bold">Status:</div>
                <div id="status">Waiting...</div>
            </div>
        </div>
        
        <!-- Analysis Result Display -->
        <div id="analysisResult" class="mt-4" style="display: none;">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h6 class="mb-0">üîç AI Analysis Results</h6>
                </div>
                <div class="card-body">
                    <pre id="result" style="white-space: pre-wrap; font-family: monospace;"></pre>
                </div>
            </div>
        </div>
        
        <!-- Run Analysis Form -->
        @if (ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Count > 0)
        {
            <div id="analysisForm">
                <button type="button" class="btn btn-success btn-lg" onclick="startAnalysis()">
                    üöÄ Run AI Analysis
                </button>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                üìã Please select coding standards documents above to enable AI analysis
            </div>
        }
        
        <!-- Analysis Results - Always include but conditionally show/hide -->
        <div class="analysis-results mt-4" id="analysisResultsSection" data-analysis-id="@(string.IsNullOrEmpty(analysisId) ? "" : analysisId)" style="@((!string.IsNullOrEmpty(analysisId) || !string.IsNullOrEmpty(analysisResult) || !string.IsNullOrEmpty(analysisError)) ? "" : "display: none;")">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>üîç AI Analysis Results</h5>
                <div class="btn-group" role="group" id="analysisButtonsContainer">
                    <!-- Buttons will be injected here by JS if needed -->
                </div>
            </div>
            
            <!-- Bottom Panel View -->
            <div id="bottomPanelView">
                @if (!string.IsNullOrEmpty(analysisResult))
                {
                    <div class="card">
                        <div class="card-header bg-success text-white">
                            <h6 class="mb-0">Analysis Results</h6>
                        </div>
                        <div class="card-body">
                            <pre class="analysis-text" style="white-space: pre-wrap; font-family: monospace;">@analysisResult</pre>
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <div class="d-flex align-items-center">
                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                            <span>Analysis results will appear here...</span>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Side Panel View (initially hidden) -->
            <div id="sidePanelView" style="display: none;">
                <div class="alert alert-info">
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        <span>Loading side-panel view...</span>
                    </div>
                </div>
            </div>
        </div>
        
        @if (!string.IsNullOrEmpty(analysisError))
        {
            <div class="alert alert-danger mt-3" id="analysisErrorSection">
                ‚ùå @analysisError
            </div>
        }
    </div>

</div>

<!-- SignalR Client Library -->
<script src="https://unpkg.com/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>

<script>
    // View switching functions - use the global currentAnalysisId from site.js
    function switchToBottomPanel() {
        const bottomPanelView = document.getElementById('bottomPanelView');
        const sidePanelView = document.getElementById('sidePanelView');
        const bottomPanelBtn = document.getElementById('bottomPanelBtn');
        const sidePanelBtn = document.getElementById('sidePanelBtn');
        
        if (bottomPanelView) bottomPanelView.style.display = 'block';
        if (sidePanelView) sidePanelView.style.display = 'none';
        
        // Update button states
        if (bottomPanelBtn) {
            bottomPanelBtn.classList.remove('btn-outline-primary');
            bottomPanelBtn.classList.add('btn-primary');
        }
        if (sidePanelBtn) {
            sidePanelBtn.classList.remove('btn-primary');
            sidePanelBtn.classList.add('btn-outline-primary');
        }
        
        console.log('Switched to bottom panel view');
    }
    
    function switchToSidePanel() {
        const bottomPanelView = document.getElementById('bottomPanelView');
        const sidePanelView = document.getElementById('sidePanelView');
        const bottomPanelBtn = document.getElementById('bottomPanelBtn');
        const sidePanelBtn = document.getElementById('sidePanelBtn');
        
        if (bottomPanelView) bottomPanelView.style.display = 'none';
        if (sidePanelView) sidePanelView.style.display = 'block';
        
        // Update button states
        if (sidePanelBtn) {
            sidePanelBtn.classList.remove('btn-outline-primary');
            sidePanelBtn.classList.add('btn-primary');
        }
        if (bottomPanelBtn) {
            bottomPanelBtn.classList.remove('btn-primary');
            bottomPanelBtn.classList.add('btn-outline-primary');
        }
        
        // Load side panel view
        loadSidePanelView();
        
        console.log('Switched to side panel view');
    }
    
    function loadSidePanelView() {
        // Use the global currentAnalysisId from site.js
        if (!window.currentAnalysisId) {
            const sidePanelView = document.getElementById('sidePanelView');
            if (sidePanelView) {
                sidePanelView.innerHTML = '<div class="alert alert-warning">No analysis ID available for side-panel view</div>';
            }
            return;
        }
        
        // Show loading state
        const sidePanelView = document.getElementById('sidePanelView');
        if (sidePanelView) {
            sidePanelView.innerHTML =
                '<div class="alert alert-info">' +
                '<div class="d-flex align-items-center">' +
                '<div class="spinner-border spinner-border-sm me-2" role="status"></div>' +
                '<span>Loading side-panel view...</span>' +
                '</div>' +
                '</div>';
        }
        
        // Redirect to results page with the analysis ID
        window.location.href = `/results/${window.currentAnalysisId}`;
    }
    
    // Initialize view based on current state
    document.addEventListener('DOMContentLoaded', function() {
        // Only initialize if the view switching elements exist
        const analysisResultsSection = document.getElementById('analysisResultsSection');
        if (analysisResultsSection) {
            // Set initial state to bottom panel view
            switchToBottomPanel();
            
            // Hide the old analysis result section if it exists
            const oldResult = document.querySelector('.analysis-results pre');
            if (oldResult && oldResult.parentElement.parentElement.classList.contains('card')) {
                oldResult.parentElement.parentElement.parentElement.style.display = 'none';
            }
        }
    });
    
    // Function to dynamically inject the view-switching buttons
    function injectAnalysisButtons() {
        const container = document.getElementById('analysisButtonsContainer');
        const analysisId = document.getElementById('analysisResultsSection')?.dataset.analysisId;
        
        console.log('üîÑ injectAnalysisButtons called, analysisId:', analysisId);
        
        // If no analysis ID yet, don't inject (check for null, undefined, or empty string)
        if (!analysisId || analysisId === '') {
            console.log('‚ùå No analysisId found, skipping button injection');
            return;
        }

        // Prevent duplicate injection
        if (container.querySelector('#bottomPanelBtn')) {
            console.log('‚úÖ Buttons already injected, skipping');
            return;
        }

        console.log('üîß Creating analysis buttons...');

        // Create buttons
        const bottomBtn = document.createElement('button');
        bottomBtn.type = 'button';
        bottomBtn.className = 'btn btn-outline-primary';
        bottomBtn.id = 'bottomPanelBtn';
        bottomBtn.onclick = switchToBottomPanel;
        bottomBtn.textContent = 'üìã Bottom Panel';

        const sideBtn = document.createElement('button');
        sideBtn.type = 'button';
        sideBtn.className = 'btn btn-outline-primary';
        sideBtn.id = 'sidePanelBtn';
        sideBtn.onclick = switchToSidePanel;
        sideBtn.textContent = 'üîÄ Side Panel';

        // Clear container and append
        container.innerHTML = '';
        container.appendChild(bottomBtn);
        container.appendChild(sideBtn);

        // Initially set to bottom panel
        switchToBottomPanel();

        console.log('‚úÖ Analysis buttons injected dynamically');
    }
    
    // Only run if the section exists
    document.addEventListener('DOMContentLoaded', function() {
        const section = document.getElementById('analysisResultsSection');
        if (section) {
            console.log('‚úÖ analysisResultsSection found, injecting buttons...');
            injectAnalysisButtons();
            
            // Poll for new analysisId (in case it gets updated dynamically)
            setInterval(() => {
                const section = document.getElementById('analysisResultsSection');
                const analysisId = section?.dataset.analysisId;
                if (section && analysisId && analysisId !== '' && !section.querySelector('#bottomPanelBtn')) {
                    console.log('üîÑ Polling: Found valid analysisId, injecting buttons...');
                    injectAnalysisButtons();
                }
            }, 2000);
        } else {
            console.log('‚ÑπÔ∏è analysisResultsSection hidden - no analysis data available yet');
        }
    });
    
    // Make it globally available
    window.injectAnalysisButtons = injectAnalysisButtons;
</script>
