@{
    ViewData["Title"] = "Home Page";
    var analysisResult = Context.Session.GetString("AnalysisResult");
    var analysisError = Context.Session.GetString("AnalysisError");
    var analysisId = Context.Session.GetString("AnalysisId");
}

<div class="text-center workflow-main-container">
    <h1 class="display-4">Welcome</h1>
    
    <!-- Debug info for development -->
    <script>
        console.log('üìä Session Debug Info:');
        console.log('Analysis ID: @(analysisId ?? "null")');
        console.log('Analysis Result: @(analysisResult ?? "null")');
        console.log('Analysis Error: @(analysisError ?? "null")');
        
        // Set global analysis ID for view switching
        @if (!string.IsNullOrEmpty(analysisId))
        {
            <text>
            window.currentAnalysisId = '@analysisId';
            console.log('üÜî Set window.currentAnalysisId to:', window.currentAnalysisId);
            </text>
        }
        
        // Debug toggleStandardsSelector function availability
        console.log('üîç Debug: Checking toggleStandardsSelector availability at page load');
        console.log('üîç window.toggleStandardsSelector exists:', typeof window.toggleStandardsSelector !== 'undefined');
        console.log('üîç window.toggleStandardsSelector type:', typeof window.toggleStandardsSelector);
        
        // Safety mechanism: Define a fallback toggleStandardsSelector function
        // This ensures the function exists even if the main definition fails
        window.safeToggleStandardsSelector = function() {
            console.log('üõ°Ô∏è Safe toggleStandardsSelector called');
            const dropdown = document.getElementById('standardsDropdown') || document.querySelector('[data-step="1"] #standardsDropdown');
            if (dropdown) {
                console.log('üõ°Ô∏è Safe mode: Found dropdown, toggling display');
                dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
            } else {
                console.error('üõ°Ô∏è Safe mode: Could not find standardsDropdown element');
            }
        };
        
        console.log('üõ°Ô∏è Safe toggleStandardsSelector function defined');
    </script>
    
    @if (ViewBag.BranchInfo != null)
    {
        <div class="git-status">
            @if (ViewBag.IsError)
            {
                <div class="workflow-alert workflow-alert-warning" role="alert">
                    ‚ö†Ô∏è @ViewBag.BranchInfo
                </div>
            }
            else
            {
                <div class="workflow-alert workflow-alert-success" role="alert">
                    üåø Current branch: <strong>@ViewBag.BranchInfo</strong>
                </div>
            }
        </div>
    }
    
    <!-- CSS Grid Workflow Container -->
    <div class="workflow-grid-container">
        
        <!-- Step 1: Requirements -->
        <div class="workflow-grid-item" data-step="1">
            <div class="workflow-grid-item-header">
                <span>üìÅ</span>
                Requirements
            </div>
            <div class="workflow-grid-item-content">
                <!-- Folder Configuration -->
                <div class="mb-3">
                    <form asp-action="SetDocumentsFolder" method="post">
                        <div class="workflow-input-group">
                            <input type="text" class="workflow-form-control" name="folderPath"
                                   placeholder="Documents folder path"
                                   value="@ViewBag.DocumentsFolder">
                            <button class="workflow-btn workflow-btn-secondary" type="submit">Set Folder</button>
                        </div>
                    </form>
                </div>
                
                <!-- Document Selection -->
                <div class="flow-item" onclick="console.log('üñ±Ô∏è Requirements flow-item clicked, calling toggleStandardsSelector...'); (window.toggleStandardsSelector || window.safeToggleStandardsSelector)();" tabindex="0">
                    <span class="icon">üìÑ</span>
                    <span class="value" id="standardsValue">
                        @if (ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Count > 0)
                        {
                            @($"Selected: {string.Join(", ", ((List<string>)ViewBag.SelectedDocuments).Select(doc => DocumentService.GetDocumentDisplayName(doc)))}")
                        }
                        else
                        {
                            <em>No documents selected</em>
                        }
                    </span>
                    <span class="edit-icon">‚úèÔ∏è</span>
                </div>

                <!-- Hidden form that appears on click -->
                <div id="standardsDropdown" class="workflow-dropdown" style="display: none;">
                    @if (ViewBag.AvailableDocuments.Count > 0)
                    {
                        <form asp-action="SelectDocuments" method="post" id="documentSelectionForm">
                            <div class="mb-3">
                                <label>Select coding standards:</label>
                                @foreach (var doc in ViewBag.AvailableDocuments)
                                {
                                    <div class="workflow-form-check">
                                        <input class="workflow-form-check-input" type="checkbox"
                                               name="selectedDocuments" value="@doc"
                                               @(ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Contains(doc) ? "checked" : "")>
                                        <label class="workflow-form-check-label">@DocumentService.GetDocumentDisplayName(doc)</label>
                                    </div>
                                }
                            </div>
                            <button type="submit" class="workflow-btn workflow-btn-primary" onclick="handleDocumentSelection(event)">Apply Selection</button>
                        </form>
                        <script>
                            // Handle document selection with AJAX to prevent page reload
                            function handleDocumentSelection(event) {
                                event.preventDefault();
                                const form = document.getElementById('documentSelectionForm');
                                const formData = new FormData(form);
                                
                                fetch('/Home/SelectDocuments', {
                                    method: 'POST',
                                    body: formData
                                })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success !== false) {
                                        console.log('[Index] Document selection successful');
                                        // Update the UI to reflect the selection
                                        const selectedDocs = Array.from(formData.getAll('selectedDocuments'));
                                        const displayText = selectedDocs.length > 0
                                            ? `Selected: ${selectedDocs.map(doc => doc.split('/').pop()).join(', ')}`
                                            : 'No documents selected';
                                        document.getElementById('standardsValue').innerHTML = `<em>${displayText}</em>`;
                                        document.getElementById('standardsDropdown').style.display = 'none';
                                        
                                        // Validate and advance workflow - auto-advance through all steps with defaults
                                        if (window.workflowAPI) {
                                            console.log('[Index] Validating step 1 after document selection');
                                            window.workflowAPI.validateAndAdvanceStep(1);
                                            
                                            // Auto-advance through steps 2, 3, 4, and 5 since they have defaults
                                            // Use a more reliable chained approach
                                            setTimeout(() => {
                                                if (window.workflowAPI) {
                                                    console.log('[Index] Auto-advancing to step 2 (language)');
                                                    window.workflowAPI.validateAndAdvanceStep(2);
                                                }
                                            }, 200);
                                            
                                            setTimeout(() => {
                                                if (window.workflowAPI) {
                                                    console.log('[Index] Auto-advancing to step 3 (repository)');
                                                    // Set default repository path if not set
                                                    const repoInput = document.getElementById('repositoryPathInput');
                                                    if (repoInput && !repoInput.value.trim()) {
                                                        repoInput.value = '@Html.Raw(ViewBag.RepositoryPath ?? "")' || 'C:\\git\\AICodeReviewer\\AICodeReviewer';
                                                        console.log('[Index] Set default repository path:', repoInput.value);
                                                    }
                                                    window.workflowAPI.validateAndAdvanceStep(3);
                                                }
                                            }, 400);
                                            
                                            setTimeout(() => {
                                                if (window.workflowAPI) {
                                                    console.log('[Index] Auto-advancing to step 4 (analysis type)');
                                                    window.workflowAPI.validateAndAdvanceStep(4);
                                                }
                                            }, 600);
                                            
                                            setTimeout(() => {
                                                if (window.workflowAPI) {
                                                    console.log('[Index] Auto-advancing to step 5 (model selection)');
                                                    window.workflowAPI.validateAndAdvanceStep(5);
                                                }
                                            }, 800);
                                            
                                            setTimeout(() => {
                                                if (window.workflowAPI) {
                                                    console.log('[Index] Auto-advancing to step 6 (start analysis)');
                                                    window.workflowAPI.validateAndAdvanceStep(6);
                                                }
                                            }, 1000);
                                        }
                                    } else {
                                        console.error('[Index] Document selection failed:', data.error);
                                    }
                                })
                                .catch(error => {
                                    console.error('[Index] Error submitting document selection:', error);
                                    // Fallback to traditional form submission
                                    form.submit();
                                });
                            }
                            
                            // Add validation after document selection form submission (fallback)
                            document.addEventListener('DOMContentLoaded', function() {
                                const documentForm = document.querySelector('[data-step="1"] form');
                                if (documentForm) {
                                    documentForm.addEventListener('submit', function(e) {
                                        // Only use fallback if the onclick handler didn't prevent default
                                        if (!e.defaultPrevented) {
                                            setTimeout(function() {
                                                if (window.workflowAPI) {
                                                    console.log('[Index] Validating step 1 after document selection (fallback)');
                                                    window.workflowAPI.validateAndAdvanceStep(1);
                                                    // Auto-advance through steps 2, 3, 4, and 5 since they have defaults - fallback
                                                    setTimeout(() => {
                                                        if (window.workflowAPI) {
                                                            console.log('[Index] Auto-advancing to step 2 (language) - fallback');
                                                            window.workflowAPI.validateAndAdvanceStep(2);
                                                        }
                                                    }, 200);
                                                    
                                                    setTimeout(() => {
                                                        if (window.workflowAPI) {
                                                            console.log('[Index] Auto-advancing to step 3 (repository) - fallback');
                                                            // Set default repository path if not set
                                                            const repoInput = document.getElementById('repositoryPathInput');
                                                            if (repoInput && !repoInput.value.trim()) {
                                                                repoInput.value = '@Html.Raw(ViewBag.RepositoryPath ?? "")' || 'C:\\git\\AICodeReviewer\\AICodeReviewer';
                                                                console.log('[Index] Set default repository path (fallback):', repoInput.value);
                                                            }
                                                            window.workflowAPI.validateAndAdvanceStep(3);
                                                        }
                                                    }, 400);
                                                    
                                                    setTimeout(() => {
                                                        if (window.workflowAPI) {
                                                            console.log('[Index] Auto-advancing to step 4 (analysis type) - fallback');
                                                            window.workflowAPI.validateAndAdvanceStep(4);
                                                        }
                                                    }, 600);
                                                    
                                                    setTimeout(() => {
                                                        if (window.workflowAPI) {
                                                            console.log('[Index] Auto-advancing to step 5 (model selection) - fallback');
                                                            window.workflowAPI.validateAndAdvanceStep(5);
                                                        }
                                                    }, 800);
                                                    
                                                    setTimeout(() => {
                                                        if (window.workflowAPI) {
                                                            console.log('[Index] Auto-advancing to step 6 (start analysis) - fallback');
                                                            window.workflowAPI.validateAndAdvanceStep(6);
                                                        }
                                                    }, 1000);
                                                }
                                            }, 500);
                                        }
                                    });
                                }
                            });
                        </script>
                    }
                    else if (!string.IsNullOrEmpty(ViewBag.DocumentsFolder))
                    {
                        <div class="workflow-alert workflow-alert-info">
                            üìã No .md documents found in folder
                        </div>
                    }
                </div>
                
                <!-- Selected Documents Summary -->
                @if (ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Count > 0)
                {
                    <div class="workflow-alert workflow-alert-success mt-3">
                        ‚úÖ Selected: <strong>@string.Join(", ", ((List<string>)ViewBag.SelectedDocuments).Select(doc => DocumentService.GetDocumentDisplayName(doc)))</strong>
                    </div>
                }
                
                <!-- Document Scan Error -->
                @if (ViewBag.DocumentScanError != null)
                {
                    <div class="workflow-alert workflow-alert-warning mt-3">
                        ‚ö†Ô∏è @ViewBag.DocumentScanError
                    </div>
                }
            </div>
        </div>
        
        <!-- Step 2: Language -->
        <div class="workflow-grid-item" data-step="2">
            <div class="workflow-grid-item-header">
                <span>‚öôÔ∏è</span>
                Language
            </div>
            <div class="workflow-grid-item-content">
                <div class="selected-item">
                    <span class="icon">üêç</span>
                    <span class="value" id="languageValue">Python</span>
                    <span class="edit-icon">‚úèÔ∏è</span>
                </div>

                <!-- Language selection dropdown inside white content area -->
                <div class="language-selection">
                    <label for="language-dropdown">Select Language:</label>
                    <select id="language-dropdown" class="form-select">
                        <option value="csharp">.NET (C#)</option>
                        <option value="python" selected>Python</option>
                        <option value="javascript">JavaScript</option>
                    </select>
                </div>
                <script>
                    // Add validation for language selection
                    document.addEventListener('DOMContentLoaded', function() {
                        const languageDropdown = document.getElementById('language-dropdown');
                        
                        // Auto-validate step 2 when workflow reaches it (language has default value)
                        function autoValidateStep2() {
                            if (window.workflowAPI && window.horizontalWorkflow) {
                                const currentStep = window.horizontalWorkflow.getCurrentStep();
                                // Auto-validate if we're at step 2 and it has valid default
                                if (currentStep === 2) {
                                    console.log('[Index] Auto-validating step 2 - checking default language');
                                    // Step 2 should be valid by default since Python is pre-selected
                                    const isValid = window.workflowAPI.isStepValid(2);
                                    if (isValid) {
                                        console.log('[Index] Step 2 auto-validation successful, advancing');
                                        window.workflowAPI.validateAndAdvanceStep(2);
                                    }
                                }
                            }
                        }
                        
                        // Listen for workflow step changes to auto-validate when reaching step 2
                        window.addEventListener('workflowStepChanged', function(event) {
                            if (event.detail.currentStep === 2) {
                                console.log('[Index] Reached step 2, triggering auto-validation');
                                autoValidateStep2();
                            }
                        });
                        
                        // Also try on page load in case workflow is already at step 2
                        setTimeout(autoValidateStep2, 500);
                        
                        if (languageDropdown) {
                            languageDropdown.addEventListener('change', function() {
                                // Update the display with the selected language
                                updateLanguageDisplay(this.value);
                                
                                setTimeout(function() {
                                    if (window.workflowAPI) {
                                        console.log('[Index] Validating step 2 after language selection');
                                        window.workflowAPI.validateAndAdvanceStep(2);
                                    }
                                }, 300);
                            });
                        }
                    });
                    
                    // Function to update language display
                    function updateLanguageDisplay(languageValue) {
                        const languageValueElement = document.getElementById('languageValue');
                        const languageIcon = document.querySelector('.selected-item .icon');
                        
                        if (languageValueElement && languageIcon) {
                            switch(languageValue) {
                                case 'csharp':
                                    languageValueElement.textContent = '.NET (C#)';
                                    languageIcon.textContent = 'üî∑';
                                    break;
                                case 'python':
                                    languageValueElement.textContent = 'Python';
                                    languageIcon.textContent = 'üêç';
                                    break;
                                case 'javascript':
                                    languageValueElement.textContent = 'JavaScript';
                                    languageIcon.textContent = 'üìú';
                                    break;
                                default:
                                    languageValueElement.textContent = 'Python';
                                    languageIcon.textContent = 'üêç';
                            }
                        }
                    }
                </script>
            </div>
        </div>
        
        <!-- Step 3: Repository -->
        <div class="workflow-grid-item" data-step="3">
            <div class="workflow-grid-item-header">
                <span>üìÅ</span>
                Repository
            </div>
            <div class="workflow-grid-item-content">
                <!-- Repository Path Configuration -->
                <div class="mb-3">
                    <form asp-action="SetRepositoryPath" method="post" id="repositoryPathForm">
                        <div class="workflow-input-group">
                            <input type="text" class="workflow-form-control" name="repositoryPath"
                                   placeholder="Repository path"
                                   value="@ViewBag.RepositoryPath"
                                   id="repositoryPathInput">
                            <button class="workflow-btn workflow-btn-secondary" type="button" onclick="openDirectoryBrowser()">
                                üìÅ Browse
                            </button>
                            <button class="workflow-btn workflow-btn-primary" type="submit" onclick="handleRepositoryPath(event)">Set Repository</button>
                        </div>
                    </form>
                    <script>
                        // Handle repository path submission with AJAX to prevent page reload
                        function handleRepositoryPath(event) {
                            event.preventDefault();
                            const form = document.getElementById('repositoryPathForm');
                            const formData = new FormData(form);
                            
                            fetch('/Home/SetRepositoryPath', {
                                method: 'POST',
                                body: formData
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success !== false) {
                                    console.log('[Index] Repository path set successfully');
                                    // Validate and advance workflow
                                    if (window.workflowAPI) {
                                        console.log('[Index] Validating step 3 after repository selection');
                                        window.workflowAPI.validateAndAdvanceStep(3);
                                    }
                                } else {
                                    console.error('[Index] Repository path setting failed:', data.error);
                                }
                            })
                            .catch(error => {
                                console.error('[Index] Error submitting repository path:', error);
                                // Fallback to traditional form submission
                                form.submit();
                            });
                        }
                        
                        // Add validation after repository path form submission (fallback)
                        document.addEventListener('DOMContentLoaded', function() {
                            const repositoryForm = document.querySelector('[data-step="3"] form');
                            if (repositoryForm) {
                                repositoryForm.addEventListener('submit', function(e) {
                                    // Only use fallback if the onclick handler didn't prevent default
                                    if (!e.defaultPrevented) {
                                        setTimeout(function() {
                                            if (window.workflowAPI) {
                                                console.log('[Index] Validating step 3 after repository selection (fallback)');
                                                // Ensure repository path is set to default if empty for fallback validation
                                                const repoInput = document.getElementById('repositoryPathInput');
                                                if (repoInput && !repoInput.value.trim()) {
                                                    repoInput.value = '@Html.Raw(ViewBag.RepositoryPath ?? "")' || 'C:\\git\\AICodeReviewer\\AICodeReviewer';
                                                    console.log('[Index] Set default repository path (fallback validation):', repoInput.value);
                                                }
                                                window.workflowAPI.validateAndAdvanceStep(3);
                                            }
                                        }, 500);
                                    }
                                });
                            }
                        });
                    </script>
                </div>
                
                <!-- Directory Browser Modal -->
                <div class="modal fade" id="directoryBrowserModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="workflow-modal-content">
                            <div class="workflow-modal-header">
                                <h5 class="workflow-modal-title">üìÅ Select Repository Directory</h5>
                                <button type="button" class="workflow-btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="workflow-modal-body">
                                <div class="mb-3">
                                    <div class="workflow-input-group">
                                        <input type="text" class="workflow-form-control" id="currentDirectoryPath" readonly>
                                        <button class="workflow-btn workflow-btn-secondary" type="button" onclick="navigateToParent()">
                                            ‚¨ÜÔ∏è Up
                                        </button>
                                        <button class="workflow-btn workflow-btn-primary" type="button" onclick="selectCurrentDirectory()">
                                            ‚úÖ Select This Folder
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="directory-browser-container" style="max-height: 400px; overflow-y: auto;">
                                    <div id="directoryBrowserLoading" class="text-center p-4" style="display: none;">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <p class="mt-2">Loading directories...</p>
                                    </div>
                                    
                                    <div id="directoryBrowserContent">
                                        <!-- Directory content will be loaded here -->
                                    </div>
                                    
                                    <div id="directoryBrowserError" class="workflow-alert workflow-alert-danger" style="display: none;">
                                        <!-- Error messages will appear here -->
                                    </div>
                                </div>
                            </div>
                            <div class="workflow-modal-footer">
                                <button type="button" class="workflow-btn workflow-btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="workflow-btn workflow-btn-primary" onclick="selectCurrentDirectory()">Select Folder</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Step 4: Analysis -->
        <div class="workflow-grid-item" data-step="4">
            <div class="workflow-grid-item-header">
                <span>üîç</span>
                Analysis
            </div>
            <div class="workflow-grid-item-content">
                <div class="workflow-form-check">
                    <input class="workflow-form-check-input" type="radio" name="analysisType" id="uncommittedChanges" value="uncommitted" checked>
                    <label class="workflow-form-check-label" for="uncommittedChanges">
                        Uncommitted Changes
                    </label>
                </div>
                <div class="workflow-form-check">
                    <input class="workflow-form-check-input" type="radio" name="analysisType" id="specificCommit" value="commit">
                    <label class="workflow-form-check-label" for="specificCommit">
                        Specific Commit
                    </label>
                </div>
                <div class="workflow-form-check">
                    <input class="workflow-form-check-input" type="radio" name="analysisType" id="singleFile" value="singlefile">
                    <label class="workflow-form-check-label" for="singleFile">
                        Single File
                    </label>
                </div>
                <div class="mt-2" id="commitIdContainer" style="display: none;">
                    <div class="workflow-input-group">
                        <input type="text" class="workflow-form-control" id="commitId" name="commitId"
                               placeholder="Enter commit ID (full or partial hash)">
                        <button class="workflow-btn workflow-btn-secondary" type="button" id="validateCommit">Validate</button>
                    </div>
                    <div id="commitValidationResult" class="workflow-form-text"></div>
                </div>
                <div class="mt-2" id="filePickerContainer" style="display: none;">
                    <div class="workflow-input-group">
                        <input type="text" class="workflow-form-control" id="filePath" name="filePath"
                               placeholder="Enter full file path (e.g., C:\path\to\file.py or /path/to/file.py)"
                               style="transition: background-color 0.3s, border-color 0.3s;">
                        <button class="workflow-btn workflow-btn-secondary" type="button" id="browseFile">Browse</button>
                        <input type="file" id="fileInput" accept=".cs,.js,.py" style="display: none;">
                    </div>
                    <div id="fileValidationResult" class="workflow-form-text"></div>
                    <small class="workflow-text-muted">
                        <strong>Note:</strong> Due to browser security, file browsing only provides the filename.
                        Please enter the <strong>full file path</strong> manually or use the repository-relative path.
                        Supported types: .cs (C#), .js (JavaScript), .py (Python)
                    </small>
                </div>
                <script>
                    // Add validation for analysis type selection
                    document.addEventListener('DOMContentLoaded', function() {
                        const analysisTypeRadios = document.querySelectorAll('input[name="analysisType"]');
                        const commitIdInput = document.getElementById('commitId');
                        const filePathInput = document.getElementById('filePath');
                        
                        // Auto-validate step 4 when workflow reaches it (analysis type has default value)
                        function autoValidateStep4() {
                            if (window.workflowAPI && window.horizontalWorkflow) {
                                const currentStep = window.horizontalWorkflow.getCurrentStep();
                                // Auto-validate if we're at step 4 and it has valid default
                                if (currentStep === 4) {
                                    console.log('[Index] Auto-validating step 4 - checking default analysis type');
                                    // Step 4 should be valid by default since "uncommitted" is pre-selected
                                    const isValid = window.workflowAPI.isStepValid(4);
                                    if (isValid) {
                                        console.log('[Index] Step 4 auto-validation successful, advancing');
                                        window.workflowAPI.validateAndAdvanceStep(4);
                                    }
                                }
                            }
                        }
                        
                        // Listen for workflow step changes to auto-validate when reaching step 4
                        window.addEventListener('workflowStepChanged', function(event) {
                            if (event.detail.currentStep === 4) {
                                console.log('[Index] Reached step 4, triggering auto-validation');
                                autoValidateStep4();
                            }
                        });
                        
                        // Also try on page load in case workflow is already at step 4
                        setTimeout(autoValidateStep4, 500);
                        
                        // Validate when analysis type changes
                        analysisTypeRadios.forEach(radio => {
                            radio.addEventListener('change', function() {
                                setTimeout(function() {
                                    if (window.workflowAPI) {
                                        console.log('[Index] Validating step 4 after analysis type change');
                                        window.workflowAPI.validateAndAdvanceStep(4);
                                    }
                                }, 300);
                            });
                        });
                        
                        // Validate when commit ID is entered
                        if (commitIdInput) {
                            commitIdInput.addEventListener('input', function() {
                                setTimeout(function() {
                                    const currentAnalysisType = document.querySelector('input[name="analysisType"]:checked');
                                    if (currentAnalysisType && currentAnalysisType.value === 'commit' && window.workflowAPI) {
                                        console.log('[Index] Validating step 4 after commit ID input');
                                        window.workflowAPI.validateAndAdvanceStep(4);
                                    }
                                }, 500);
                            });
                        }
                        
                        // Validate when file path is entered
                        if (filePathInput) {
                            filePathInput.addEventListener('input', function() {
                                setTimeout(function() {
                                    const currentAnalysisType = document.querySelector('input[name="analysisType"]:checked');
                                    if (currentAnalysisType && currentAnalysisType.value === 'singlefile' && window.workflowAPI) {
                                        console.log('[Index] Validating step 4 after file path input');
                                        window.workflowAPI.validateAndAdvanceStep(4);
                                    }
                                }, 500);
                            });
                        }
                    });
                </script>
            </div>
        </div>
        
        <!-- Step 5: Model -->
        <div class="workflow-grid-item" data-step="5">
            <div class="workflow-grid-item-header">
                <span>ü§ñ</span>
                Model
            </div>
            <div class="workflow-grid-item-content">
                <div class="flow-item" onclick="toggleModelSelector()" tabindex="0">
                    <span class="icon">ü§ñ</span>
                    <span class="value" id="modelValue">
                        @if (ViewBag.AvailableModels != null && ViewBag.AvailableModels.Count > 0)
                        {
                            @(ViewBag.AvailableModels[0])
                        }
                        else
                        {
                            <em>No models available</em>
                        }
                    </span>
                    <span class="edit-icon">‚úèÔ∏è</span>
                </div>

                <!-- Hidden dropdown that appears on click -->
                <div id="modelDropdown" class="workflow-dropdown" style="display: none;">
                    <select class="workflow-form-select" id="modelSelect" name="model">
                        @if (ViewBag.AvailableModels != null && ViewBag.AvailableModels.Count > 0)
                        {
                            var firstModel = ViewBag.AvailableModels[0];
                            @foreach (var availableModel in ViewBag.AvailableModels)
                            {
                                if (availableModel == firstModel)
                                {
                                    <option value="@availableModel" selected>@availableModel</option>
                                }
                                else
                                {
                                    <option value="@availableModel">@availableModel</option>
                                }
                            }
                        }
                        else
                        {
                            <option value="">No models available</option>
                        }
                    </select>
                </div>
                <script>
                    // Add validation for model selection
                    document.addEventListener('DOMContentLoaded', function() {
                        const modelSelect = document.getElementById('modelSelect');
                        
                        // Auto-validate step 5 when workflow reaches it (model has default value)
                        function autoValidateStep5() {
                            if (window.workflowAPI && window.horizontalWorkflow) {
                                const currentStep = window.horizontalWorkflow.getCurrentStep();
                                // Auto-validate if we're at step 5 and it has valid default
                                if (currentStep === 5) {
                                    console.log('[Index] Auto-validating step 5 - checking default model');
                                    // Step 5 should be valid by default since first model is pre-selected
                                    const isValid = window.workflowAPI.isStepValid(5);
                                    if (isValid) {
                                        console.log('[Index] Step 5 auto-validation successful, advancing');
                                        window.workflowAPI.validateAndAdvanceStep(5);
                                    }
                                }
                            }
                        }
                        
                        // Listen for workflow step changes to auto-validate when reaching step 5
                        window.addEventListener('workflowStepChanged', function(event) {
                            if (event.detail.currentStep === 5) {
                                console.log('[Index] Reached step 5, triggering auto-validation');
                                autoValidateStep5();
                            }
                        });
                        
                        // Also try on page load in case workflow is already at step 5
                        setTimeout(autoValidateStep5, 500);
                        
                        if (modelSelect) {
                            modelSelect.addEventListener('change', function() {
                                setTimeout(function() {
                                    if (window.workflowAPI) {
                                        console.log('[Index] Validating step 5 after model selection');
                                        window.workflowAPI.validateAndAdvanceStep(5);
                                    }
                                }, 300);
                            });
                        }
                    });
                </script>
            </div>
        </div>
        
    </div>

    <!-- Start Analysis Button - Below Grid -->
    <div class="start-button-container">
        <button id="startAnalysisBtn" class="workflow-btn workflow-btn-success workflow-btn-lg" onclick="startAnalysisFromWorkflow()">
            üöÄ Start Analysis
        </button>
        <div class="mt-3">
            <small class="workflow-text-muted">
                Click to begin the AI code analysis with your selected configuration
            </small>
        </div>
    </div>

    <!-- Git Diff Display (Outside workflow-container) -->
    <div id="gitDiffSection" class="git-diff-section">
        @if (ViewBag.GitDiff != null)
        {
            @if (ViewBag.GitDiffError)
            {
                <div class="workflow-alert workflow-alert-warning">
                    ‚ö†Ô∏è @ViewBag.GitDiff
                </div>
            }
            else
            {
                <div class="workflow-card">
                    <div class="workflow-card-header">
                        <h6 class="mb-0">
                            <button class="workflow-btn workflow-btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#gitDiffCollapse">
                                üìä Git Changes (Click to expand/collapse)
                            </button>
                        </h6>
                    </div>
                    <div class="collapse" id="gitDiffCollapse">
                        <div class="workflow-card-body">
                            <pre class="git-diff-text workflow-pre" style="white-space: pre-wrap; font-family: monospace; font-size: 0.8em; max-height: 300px; overflow-y: auto;">@ViewBag.GitDiff</pre>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Commit Analysis Info (shown when specific commit is selected) -->
    <div id="commitAnalysisInfo" class="workflow-alert workflow-alert-info mt-3" style="display: none;">
        <div class="d-flex align-items-center">
            <div class="me-2">üîç</div>
            <div>
                <strong>Commit Analysis Mode</strong><br>
                <small>Enter a commit ID above and click "Validate" to analyze a specific commit.</small>
            </div>
        </div>
    </div>

    <!-- Single File Analysis Info (shown when single file is selected) -->
    <div id="singleFileAnalysisInfo" class="workflow-alert workflow-alert-info mt-3" style="display: none;">
        <div class="d-flex align-items-center">
            <div class="me-2">üìÑ</div>
            <div>
                <strong>Single File Analysis Mode</strong><br>
                <small>Enter a file path above (.cs, .js, .py files) or click "Browse" to select a file for analysis.</small>
            </div>
        </div>
    </div>

    <!-- Analysis Results - Always include but conditionally show/hide -->
    <div class="analysis-results mt-4" id="analysisResultsSection" data-analysis-id="@(string.IsNullOrEmpty(analysisId) ? "" : analysisId)" @(string.IsNullOrEmpty(analysisId) && string.IsNullOrEmpty(analysisResult) && string.IsNullOrEmpty(analysisError) ? "class=\"hidden-analysis\"" : "")>
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5>üîç AI Analysis Results</h5>
            <div class="btn-group" role="group" id="analysisButtonsContainer">
                <!-- Buttons will be injected here by JS if needed -->
                <button type="button" class="btn workflow-btn-secondary" id="newAnalysisBtn" onclick="resetAnalysisUI()" style="display: none;">
                    <i class="fas fa-plus"></i> New Analysis
                </button>
            </div>
        </div>

        <!-- Progress Message Display (for SignalR updates) -->
        <div id="progressContainer" style="display: none;">
            <div class="workflow-alert workflow-alert-info mb-3">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    <span id="progressMessage">Starting analysis...</span>
                </div>
            </div>
        </div>

        <!-- Analysis Result Display (for SignalR results) -->
        <div id="analysisResult" style="display: none;">
            <div class="workflow-card mb-3">
                <div class="workflow-card-header workflow-card-header-success">
                    <h6 class="mb-0">Analysis Results</h6>
                </div>
                <div class="workflow-card-body">
                    <pre id="result" class="analysis-text workflow-pre" style="white-space: pre-wrap; font-family: monospace;"></pre>
                </div>
            </div>
        </div>

        <!-- Bottom Panel View -->
        <div id="bottomPanelView">
            @if (!string.IsNullOrEmpty(analysisResult))
            {
                <div class="workflow-card">
                    <div class="workflow-card-header workflow-card-header-success">
                        <h6 class="mb-0">Analysis Results</h6>
                    </div>
                    <div class="workflow-card-body">
                        <pre class="analysis-text workflow-pre" style="white-space: pre-wrap; font-family: monospace;">@analysisResult</pre>
                    </div>
                </div>
            }
            else
            {
                <div class="workflow-alert workflow-alert-info">
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        <span>Analysis results will appear here...</span>
                    </div>
                </div>
            }
        </div>

        <!-- Side Panel View (initially hidden) -->
        <div id="sidePanelView" style="display: none;">
            <div class="workflow-alert workflow-alert-info">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    <span>Loading side-panel view...</span>
                </div>
            </div>
        </div>
    </div>

@if (!string.IsNullOrEmpty(analysisError))
{
        <div class="workflow-alert workflow-alert-danger mt-3" id="analysisErrorSection">
            ‚ùå @analysisError
        </div>
}

<!-- SignalR Client Library -->
<script src="https://unpkg.com/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>

<script>
    // View switching functions - use the global currentAnalysisId from site.js
    function switchToBottomPanel() {
        const bottomPanelView = document.getElementById('bottomPanelView');
        const sidePanelView = document.getElementById('sidePanelView');
        const bottomPanelBtn = document.getElementById('bottomPanelBtn');
        const sidePanelBtn = document.getElementById('sidePanelBtn');
        
        if (bottomPanelView) bottomPanelView.style.display = 'block';
        if (sidePanelView) sidePanelView.style.display = 'none';
        
        // Update button states
        if (bottomPanelBtn) {
            bottomPanelBtn.classList.remove('btn-outline-primary');
            bottomPanelBtn.classList.add('btn-primary');
        }
        if (sidePanelBtn) {
            sidePanelBtn.classList.remove('btn-primary');
            sidePanelBtn.classList.add('btn-outline-primary');
        }
        
        console.log('Switched to bottom panel view');
    }
    
    function switchToSidePanel() {
        const bottomPanelView = document.getElementById('bottomPanelView');
        const sidePanelView = document.getElementById('sidePanelView');
        const bottomPanelBtn = document.getElementById('bottomPanelBtn');
        const sidePanelBtn = document.getElementById('sidePanelBtn');
        
        if (bottomPanelView) bottomPanelView.style.display = 'none';
        if (sidePanelView) sidePanelView.style.display = 'block';
        
        // Update button states
        if (sidePanelBtn) {
            sidePanelBtn.classList.remove('btn-outline-primary');
            sidePanelBtn.classList.add('btn-primary');
        }
        if (bottomPanelBtn) {
            bottomPanelBtn.classList.remove('btn-primary');
            bottomPanelBtn.classList.add('btn-outline-primary');
        }
        
        // Load side panel view
        loadSidePanelView();
        
        console.log('Switched to side panel view');
    }
    
    function loadSidePanelView() {
        console.log('[Index] Loading side panel view, currentAnalysisId:', window.currentAnalysisId);
        
        // Use the global currentAnalysisId from site.js
        if (!window.currentAnalysisId) {
            console.error('[Index] No analysis ID available for side-panel view');
            const sidePanelView = document.getElementById('sidePanelView');
            if (sidePanelView) {
                sidePanelView.innerHTML = '<div class="workflow-alert workflow-alert-warning">No analysis ID available for side-panel view</div>';
            }
            return;
        }
        
        // Show loading state
        const sidePanelView = document.getElementById('sidePanelView');
        if (sidePanelView) {
            sidePanelView.innerHTML =
                '<div class="workflow-alert workflow-alert-info">' +
                '<div class="d-flex align-items-center">' +
                '<div class="spinner-border spinner-border-sm me-2" role="status"></div>' +
                '<span>Loading side-panel view...</span>' +
                '</div>' +
                '</div>';
            sidePanelView.style.display = 'block';
        }
        
        // Redirect to results page with the analysis ID
        console.log('[Index] Redirecting to results page:', window.currentAnalysisId);
        window.location.href = `/results/${window.currentAnalysisId}`;
    }
    
    // Initialize view based on current state
    document.addEventListener('DOMContentLoaded', function() {
        console.log('[Index] Initializing analysis results view');
        
        // Check if we have analysis data from session
        const analysisId = '@(analysisId ?? "")';
        const analysisResult = '@(Html.Raw(analysisResult?.Replace("'", "\\'") ?? ""))';
        const analysisError = '@(Html.Raw(analysisError?.Replace("'", "\\'") ?? ""))';
        
        console.log('[Index] Session data - Analysis ID:', analysisId);
        console.log('[Index] Session data - Has result:', !!analysisResult);
        console.log('[Index] Session data - Has error:', !!analysisError);
        
        // Set global analysis ID
        if (analysisId) {
            window.currentAnalysisId = analysisId;
            console.log('[Index] Set global analysis ID:', window.currentAnalysisId);
        }
        
        // Only initialize if the view switching elements exist
        const analysisResultsSection = document.getElementById('analysisResultsSection');
        if (analysisResultsSection) {
            // If we have analysis data, show the results section
            if (analysisId || analysisResult || analysisError) {
                console.log('[Index] Found analysis data, showing results section');
                analysisResultsSection.style.display = 'block';
                analysisResultsSection.classList.remove('hidden-analysis');
                
                // Update the analysis ID in the dataset
                if (analysisId) {
                    analysisResultsSection.dataset.analysisId = analysisId;
                }
                
                // Set initial state to bottom panel view
                switchToBottomPanel();
                
                // Inject analysis buttons if we have an analysis ID
                if (analysisId && typeof injectAnalysisButtons === 'function') {
                    injectAnalysisButtons();
                }
            } else {
                console.log('[Index] No analysis data found, keeping results section hidden');
                analysisResultsSection.style.display = 'none';
                analysisResultsSection.classList.add('hidden-analysis');
            }
            
            // Hide the old analysis result section if it exists
            const oldResult = document.querySelector('.analysis-results pre');
            if (oldResult && oldResult.parentElement.parentElement.classList.contains('card')) {
                oldResult.parentElement.parentElement.parentElement.style.display = 'none';
            }
        }
    });
    
    // Function to dynamically inject the view-switching buttons
    function injectAnalysisButtons() {
        const container = document.getElementById('analysisButtonsContainer');
        const analysisId = document.getElementById('analysisResultsSection')?.dataset.analysisId;
        
        console.log('üîÑ injectAnalysisButtons called, analysisId:', analysisId);
        
        // If no analysis ID yet, don't inject (check for null, undefined, or empty string)
        if (!analysisId || analysisId === '') {
            console.log('‚ùå No analysisId found, skipping button injection');
            return;
        }

        // Prevent duplicate injection
        if (container.querySelector('#bottomPanelBtn')) {
            console.log('‚úÖ Buttons already injected, skipping');
            return;
        }

        console.log('üîß Creating analysis buttons...');

        // Create buttons with workflow styling
        const bottomBtn = document.createElement('button');
        bottomBtn.type = 'button';
        bottomBtn.className = 'btn workflow-btn-primary';
        bottomBtn.id = 'bottomPanelBtn';
        bottomBtn.onclick = switchToBottomPanel;
        bottomBtn.textContent = 'üìã Bottom Panel';

        const sideBtn = document.createElement('button');
        sideBtn.type = 'button';
        sideBtn.className = 'btn workflow-btn-outline-primary';
        sideBtn.id = 'sidePanelBtn';
        sideBtn.onclick = switchToSidePanel;
        sideBtn.textContent = 'üîÄ Side Panel';

        // Clear container and append
        container.innerHTML = '';
        container.appendChild(bottomBtn);
        container.appendChild(sideBtn);

        // Initially set to bottom panel
        switchToBottomPanel();

        console.log('‚úÖ Analysis buttons injected dynamically');
    }
    
    // Add missing workflow button style
    const style = document.createElement('style');
    style.textContent = `
        .workflow-btn-outline-primary {
            background-color: transparent;
            border: 1px solid #63b3ed;
            color: #63b3ed;
            border-radius: 6px;
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .workflow-btn-outline-primary:hover {
            background-color: #63b3ed;
            color: #1a202c;
        }
    `;
    document.head.appendChild(style);
    
    // Only run if the section exists
    document.addEventListener('DOMContentLoaded', function() {
        const section = document.getElementById('analysisResultsSection');
        if (section) {
            console.log('‚úÖ analysisResultsSection found, injecting buttons...');
            injectAnalysisButtons();
            
            // Poll for new analysisId (in case it gets updated dynamically)
            setInterval(() => {
                const section = document.getElementById('analysisResultsSection');
                const analysisId = section?.dataset.analysisId;
                if (section && analysisId && analysisId !== '' && !section.querySelector('#bottomPanelBtn')) {
                    console.log('üîÑ Polling: Found valid analysisId, injecting buttons...');
                    injectAnalysisButtons();
                }
            }, 2000);
        } else {
            console.log('‚ÑπÔ∏è analysisResultsSection hidden - no analysis data available yet');
        }
    });
    
    // Make it globally available
    window.injectAnalysisButtons = injectAnalysisButtons;
    
    // Radio button change handler for analysis type
    document.addEventListener('DOMContentLoaded', function() {
        const uncommittedRadio = document.getElementById('uncommittedChanges');
        const commitRadio = document.getElementById('specificCommit');
        const singleFileRadio = document.getElementById('singleFile');
        const commitIdContainer = document.getElementById('commitIdContainer');
        const commitIdInput = document.getElementById('commitId');
        const filePickerContainer = document.getElementById('filePickerContainer');
        const filePathInput = document.getElementById('filePath');
        
        function toggleAnalysisTypeFields() {
            const gitDiffSection = document.getElementById('gitDiffSection');
            const commitAnalysisInfo = document.getElementById('commitAnalysisInfo');
            const singleFileAnalysisInfo = document.getElementById('singleFileAnalysisInfo');
            
            // Initialize on first call
            if (!gitDiffSection || !commitAnalysisInfo || !singleFileAnalysisInfo) {
                console.log('Elements not found, skipping toggle');
                return;
            }
            
            if (commitRadio.checked) {
                commitIdContainer.style.display = 'block';
                commitIdInput.required = true;
                filePickerContainer.style.display = 'none';
                filePathInput.required = false;
                
                // Hide git diff section and show commit analysis info
                gitDiffSection.style.display = 'none';
                commitAnalysisInfo.style.display = 'block';
                singleFileAnalysisInfo.style.display = 'none';
            } else if (singleFileRadio.checked) {
                commitIdContainer.style.display = 'none';
                commitIdInput.required = false;
                commitIdInput.value = '';
                document.getElementById('commitValidationResult').innerHTML = '';
                filePickerContainer.style.display = 'block';
                filePathInput.required = true;
                
                // Hide git diff section and show single file analysis info
                gitDiffSection.style.display = 'none';
                commitAnalysisInfo.style.display = 'none';
                singleFileAnalysisInfo.style.display = 'block';
            } else {
                commitIdContainer.style.display = 'none';
                commitIdInput.required = false;
                commitIdInput.value = '';
                document.getElementById('commitValidationResult').innerHTML = '';
                filePickerContainer.style.display = 'none';
                filePathInput.required = false;
                filePathInput.value = '';
                document.getElementById('fileValidationResult').innerHTML = '';
                
                // Show git diff section and hide analysis info
                gitDiffSection.style.display = 'block';
                commitAnalysisInfo.style.display = 'none';
                singleFileAnalysisInfo.style.display = 'none';
            }
        }
        
        // Initialize the UI state based on the default radio button selection
        toggleAnalysisTypeFields();
        
        uncommittedRadio.addEventListener('change', toggleAnalysisTypeFields);
        commitRadio.addEventListener('change', toggleAnalysisTypeFields);
        singleFileRadio.addEventListener('change', toggleAnalysisTypeFields);
        
        // Validate commit button handler
        document.getElementById('validateCommit').addEventListener('click', async function() {
            const commitId = commitIdInput.value.trim();
            const validationResult = document.getElementById('commitValidationResult');
            const repositoryPath = '@Html.Raw(ViewBag.RepositoryPath)';
            
            console.log('Validating commit:', commitId);
            console.log('Repository path:', repositoryPath);
            
            if (!commitId) {
                validationResult.innerHTML = '<span class="text-warning">Please enter a commit ID</span>';
                return;
            }
            
            validationResult.innerHTML = '<span class="text-info">Validating...</span>';
            
            try {
                const response = await fetch('/Home/ValidateCommit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        commitId: commitId,
                        repositoryPath: repositoryPath
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    validationResult.innerHTML = '<span class="text-success">‚úì Valid commit: ' + result.message + '</span>';
                } else {
                    validationResult.innerHTML = '<span class="text-danger">‚úó ' + result.error + '</span>';
                }
            } catch (error) {
                validationResult.innerHTML = '<span class="text-danger">‚úó Validation failed: ' + error.message + '</span>';
            }
        });

        // File validation function
        function validateFilePath(filePath) {
            const validationResult = document.getElementById('fileValidationResult');
            
            if (!filePath) {
                validationResult.innerHTML = '<span class="text-warning">Please select or enter a file path</span>';
                return false;
            }
            
            const allowedExtensions = ['.cs', '.js', '.py'];
            const extension = filePath.toLowerCase().substring(filePath.lastIndexOf('.'));
            
            if (!allowedExtensions.includes(extension)) {
                validationResult.innerHTML = '<span class="text-danger">‚úó Unsupported file type. Allowed: ' + allowedExtensions.join(', ') + '</span>';
                return false;
            }
            
            validationResult.innerHTML = '<span class="text-success">‚úì File type supported</span>';
            return true;
        }

        // File path input validation
        filePathInput.addEventListener('input', function() {
            const filePath = this.value.trim();
            if (filePath) {
                validateFilePath(filePath);
            } else {
                document.getElementById('fileValidationResult').innerHTML = '';
            }
        });

        // Browse file button handler - triggers hidden file input
        document.getElementById('browseFile').addEventListener('click', function() {
            document.getElementById('fileInput').click();
        });

        // Handle file selection from file input
        document.getElementById('fileInput').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file) {
                // Browsers don't provide full path for security reasons
                const fileNameOnly = file.name;
                
                // Clear the input and show a message to user
                filePathInput.value = '';
                
                // Store the file object for potential future use
                window.selectedFile = file;
                
                // Provide feedback about the selected file and instructions
                const validationResult = document.getElementById('fileValidationResult');
                validationResult.innerHTML = '<span class="text-info">üìÅ File selected: ' + file.name + ' (' + Math.round(file.size / 1024) + ' KB)</span><br>' +
                    '<span class="text-warning">‚ö†Ô∏è Please enter the full file path above (browsers don\'t provide full paths for security)</span>';
                
                // Focus on the file path input to encourage manual entry
                filePathInput.focus();
                
                console.log('[DEBUG] File selected via browser:', fileNameOnly);
                console.log('[DEBUG] User needs to manually enter full path');
            }
        });

        // Allow drag and drop for file selection (enhanced UX)
        filePathInput.addEventListener('dragover', function(event) {
            event.preventDefault();
            this.style.backgroundColor = '#f0f0f0';
            this.style.borderColor = '#007bff';
        });

        filePathInput.addEventListener('dragleave', function(event) {
            event.preventDefault();
            this.style.backgroundColor = '';
            this.style.borderColor = '';
        });

        filePathInput.addEventListener('drop', function(event) {
            event.preventDefault();
            this.style.backgroundColor = '';
            this.style.borderColor = '';
            
            const files = event.dataTransfer.files;
            if (files.length > 0) {
                const file = files[0];
                const fileNameOnly = file.name;
                
                // Clear the input and show a message to user
                this.value = '';
                
                // Store the file object for potential future use
                window.selectedFile = file;
                
                // Provide feedback about the selected file and instructions
                const validationResult = document.getElementById('fileValidationResult');
                validationResult.innerHTML = '<span class="text-info">üìÅ File dropped: ' + file.name + ' (' + Math.round(file.size / 1024) + ' KB)</span><br>' +
                    '<span class="text-warning">‚ö†Ô∏è Please enter the full file path above (drag & drop only provides filename)</span>';
                
                // Focus on the file path input to encourage manual entry
                this.focus();
                
                console.log('[DEBUG] File dropped via drag & drop:', fileNameOnly);
                console.log('[DEBUG] User needs to manually enter full path');
            }
        });
    });


    // Function to toggle standards selector (document management)
    function toggleStandardsSelector() {
        console.log('üéØ toggleStandardsSelector called - original function');
        const dropdown = document.getElementById('standardsDropdown');
        if (!dropdown) {
            console.error('‚ùå toggleStandardsSelector: standardsDropdown element not found');
            return;
        }
        console.log('üìã toggleStandardsSelector: dropdown found, current display:', dropdown.style.display);
        dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
        console.log('‚úÖ toggleStandardsSelector: dropdown display changed to:', dropdown.style.display);
    }

    // Function to toggle model selector
    function toggleModelSelector() {
        const dropdown = document.getElementById('modelDropdown');
        dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
    }


    // Update model display when selection changes
    document.getElementById('modelSelect').addEventListener('change', function() {
        document.getElementById('modelValue').textContent = this.value;
        document.getElementById('modelDropdown').style.display = 'none';
    });

    // Initialize horizontal workflow manager
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üîÑ DOMContentLoaded fired - initializing workflow');
        
        if (window.horizontalWorkflow) {
            console.log('Horizontal workflow manager initialized');
            
            // Override dropdown functions to work with new structure
            console.log('üîß Workflow: Overriding dropdown functions');
            console.log('üîß Workflow: Original toggleStandardsSelector exists:', typeof window.toggleStandardsSelector !== 'undefined');
            
            window.originalToggleStandardsSelector = window.toggleStandardsSelector;
            window.originalToggleLanguageSelector = window.toggleLanguageSelector;
            window.originalToggleModelSelector = window.toggleModelSelector;
            
            window.toggleStandardsSelector = function() {
                console.log('üéØ toggleStandardsSelector called - overridden function');
                const dropdown = document.querySelector('[data-step="1"] #standardsDropdown');
                if (!dropdown) {
                    console.error('‚ùå Overridden toggleStandardsSelector: standardsDropdown element not found');
                    // Fallback to original function if override fails
                    if (window.originalToggleStandardsSelector) {
                        console.log('üîÑ Falling back to original toggleStandardsSelector');
                        return window.originalToggleStandardsSelector();
                    }
                    return;
                }
                console.log('üìã Overridden toggleStandardsSelector: dropdown found, current display:', dropdown.style.display);
                dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
                console.log('‚úÖ Overridden toggleStandardsSelector: dropdown display changed to:', dropdown.style.display);
            };
            
            console.log('‚úÖ Workflow: Dropdown functions overridden successfully');
            
            // Log final state after override
            console.log('üîç Final check: window.toggleStandardsSelector exists:', typeof window.toggleStandardsSelector !== 'undefined');
            console.log('üîç Final check: window.toggleStandardsSelector type:', typeof window.toggleStandardsSelector);
            
            // No toggle needed for language selector - dropdown is always visible
            
            window.toggleModelSelector = function() {
                const dropdown = document.querySelector('[data-step="5"] #modelDropdown');
                if (dropdown) {
                    dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
                }
            };
            
            // Listen for workflow step changes to auto-validate steps with default values
            window.addEventListener('workflowStepChanged', function(event) {
                const currentStep = event.detail.currentStep;
                console.log('[Index] Workflow step changed to:', currentStep);
                
                // Auto-validate step 2 when user reaches it (language has default value)
                if (currentStep === 2) {
                    setTimeout(function() {
                        if (window.workflowAPI) {
                            console.log('[Index] Auto-validating step 2 after reaching it');
                            const isValid = window.workflowAPI.validateAndAdvanceStep(2);
                            console.log('[Index] Step 2 auto-validation result:', isValid);
                            
                            // If step 2 validation succeeds, automatically advance step 3
                            if (isValid) {
                                setTimeout(function() {
                                    if (window.workflowAPI) {
                                        console.log('[Index] Auto-validating step 3 (repository) after step 2');
                                        // Ensure repository path is set to default if empty
                                        const repoInput = document.getElementById('repositoryPathInput');
                                        if (repoInput && !repoInput.value.trim()) {
                                            repoInput.value = '@Html.Raw(ViewBag.RepositoryPath ?? "")' || 'C:\\git\\AICodeReviewer\\AICodeReviewer';
                                            console.log('[Index] Set default repository path for auto-validation:', repoInput.value);
                                        }
                                        const step3Valid = window.workflowAPI.validateAndAdvanceStep(3);
                                        console.log('[Index] Step 3 auto-validation result:', step3Valid);
                                        
                                        // If step 3 validation succeeds, automatically advance step 4
                                        if (step3Valid) {
                                            setTimeout(function() {
                                                if (window.workflowAPI) {
                                                    console.log('[Index] Auto-validating step 4 (analysis type) after step 3');
                                                    const step4Valid = window.workflowAPI.validateAndAdvanceStep(4);
                                                    console.log('[Index] Step 4 auto-validation result:', step4Valid);
                                                    
                                                    // If step 4 validation succeeds, automatically advance step 5
                                                    if (step4Valid) {
                                                        setTimeout(function() {
                                                            if (window.workflowAPI) {
                                                                console.log('[Index] Auto-validating step 5 (model) after step 4');
                                                                const step5Valid = window.workflowAPI.validateAndAdvanceStep(5);
                                                                console.log('[Index] Step 5 auto-validation result:', step5Valid);
                                                                
                                                                // If step 5 validation succeeds, automatically advance step 6
                                                                if (step5Valid) {
                                                                    setTimeout(function() {
                                                                        if (window.workflowAPI) {
                                                                            console.log('[Index] Auto-validating step 6 (start analysis) after step 5');
                                                                            const step6Valid = window.workflowAPI.validateAndAdvanceStep(6);
                                                                            console.log('[Index] Step 6 auto-validation result:', step6Valid);
                                                                        }
                                                                    }, 200);
                                                                }
                                                            }
                                                        }, 200);
                                                    }
                                                }
                                            }, 200);
                                        }
                                    }
                                }, 300);
                            }
                        }
                    }, 200);
                }
            });
        }
    });

    // Start Analysis Workflow Integration
    function startAnalysisFromWorkflow() {
        console.log('[Index] Starting analysis from workflow');
        
        try {
            // Validate that all workflow steps are complete
            const currentStep = window.horizontalWorkflow?.getCurrentStep();
            console.log('[Index] Checking workflow completion - Current step:', currentStep);
            
            if (window.horizontalWorkflow && currentStep >= 6) {
                console.log('[Index] All workflow steps complete (step >= 6), proceeding with analysis');
                
                // Hide workflow and show progress immediately
                const workflowContainer = document.querySelector('.workflow-grid-container');
                if (workflowContainer) {
                    workflowContainer.style.display = 'none';
                }
                
                // Show the analysis results section
                const analysisResultsSection = document.getElementById('analysisResultsSection');
                if (analysisResultsSection) {
                    analysisResultsSection.style.display = 'block';
                    analysisResultsSection.classList.remove('hidden-analysis');
                }
                
                // Show progress container for SignalR updates
                const progressContainer = document.getElementById('progressContainer');
                if (progressContainer) {
                    progressContainer.style.display = 'block';
                }
                
                // Hide bottom panel view during progress
                const bottomPanelView = document.getElementById('bottomPanelView');
                if (bottomPanelView) {
                    bottomPanelView.style.display = 'none';
                }
                
                // Hide analysis result display initially
                const analysisResult = document.getElementById('analysisResult');
                if (analysisResult) {
                    analysisResult.style.display = 'none';
                }
                
                // Update progress message
                const progressMessage = document.getElementById('progressMessage');
                if (progressMessage) {
                    progressMessage.style.display = 'block';
                    progressMessage.textContent = 'Starting analysis...';
                }
                
                // Call the existing startAnalysis function from site.js
                if (typeof startAnalysis === 'function') {
                    startAnalysis();
                } else {
                    console.error('[Index] startAnalysis function not found');
                    alert('Analysis function not available. Please check the console for errors.');
                    // Reset UI on error
                    if (typeof resetAnalysisUI === 'function') {
                        resetAnalysisUI();
                    }
                }
            } else {
                console.warn('[Index] Workflow not complete, current step:', window.horizontalWorkflow?.getCurrentStep());
                alert('Please complete all workflow steps before starting analysis.');
            }
        } catch (error) {
            console.error('[Index] Error in startAnalysisFromWorkflow:', error);
            alert('Error starting analysis: ' + error.message);
            if (typeof resetAnalysisUI === 'function') {
                resetAnalysisUI();
            }
        }
    }
    
    // Reset analysis UI on error
    function resetAnalysisUI() {
        const workflowContainer = document.querySelector('.workflow-grid-container');
        if (workflowContainer) {
            workflowContainer.style.display = 'flex';
        }
        
        const analysisResultsSection = document.getElementById('analysisResultsSection');
        if (analysisResultsSection) {
            analysisResultsSection.style.display = 'none';
        }
        
        const progressMessage = document.getElementById('progressMessage');
        if (progressMessage) {
            progressMessage.style.display = 'none';
        }
    }
    
    // Auto-validate step 6 when step 5 is completed
    window.addEventListener('workflowStepChanged', function(event) {
        console.log('[Index] Workflow step changed event received:', event.detail.currentStep);
        if (event.detail.currentStep >= 6) {
            console.log('[Index] Step 5 completed, auto-validating step 6');
            if (window.workflowAPI) {
                window.workflowAPI.validateAndAdvanceStep(6);
            }
        }
    });
</script>
