@{
    ViewData["Title"] = "Home Page";
    var analysisResult = Context.Session.GetString("AnalysisResult");
    var analysisError = Context.Session.GetString("AnalysisError");
    var analysisId = Context.Session.GetString("AnalysisId");
}

<div class="text-center mb-32">
    <h1 class="display-4">Welcome</h1>
    
    <!-- Debug info for development -->
    <script>
        console.log('üìä Session Debug Info:');
        console.log('Analysis ID: @(analysisId ?? "null")');
        console.log('Analysis Result: @(analysisResult ?? "null")');
        console.log('Analysis Error: @(analysisError ?? "null")');
        
        // Set global analysis ID for view switching
        @if (!string.IsNullOrEmpty(analysisId))
        {
            <text>
            window.currentAnalysisId = '@analysisId';
            console.log('üÜî Set window.currentAnalysisId to:', window.currentAnalysisId);
            </text>
        }
    </script>
    
    @if (ViewBag.BranchInfo != null)
    {
        <div class="status-indicator mb-32">
            @if (ViewBag.IsError)
            {
                <div class="icon">‚ö†Ô∏è</div>
                <div class="content">
                    <strong>Git Status Alert</strong>
                    <span class="helper-text">@ViewBag.BranchInfo</span>
                </div>
            }
            else
            {
                <div class="icon">üåø</div>
                <div class="content">
                    <strong>Current Branch</strong>
                    <span class="helper-text">@ViewBag.BranchInfo</span>
                </div>
            }
        </div>
    }
    
    <!-- Document Management Section -->
    <div class="content-section">
        <h2 class="section-heading-enhanced">
            <span class="section-icon" aria-label="Document upload icon">üìÑ</span>
            Upload Coding Standards
        </h2>
        <p class="section-subtitle">Specify the folder containing your coding standards documents.</p>
        
        <!-- Folder Configuration -->
        <div class="form-group">
            <form asp-action="SetDocumentsFolder" method="post">
                <label class="form-label">Documents Folder Path</label>
                <div class="input-group-enhanced">
                    <div class="path-input-container path-input-drop-zone" data-input-type="documents">
                        <div class="path-input-group">
                            <span class="path-input-icon" aria-label="Folder icon">üìÅ</span>
                            <input type="text" class="path-input-field" name="folderPath"
                                   placeholder="Enter documents folder path"
                                   value="@ViewBag.DocumentsFolder"
                                   data-full-path="@ViewBag.DocumentsFolder"
                                   aria-label="Documents folder path"
                                   data-truncate="true"
                                   data-tooltip="Documents folder path">
                            <div class="path-input-tooltip"></div>
                        </div>
                        <div class="path-input-drop-indicator">Drop folder here</div>
                    </div>
                    <button type="submit" class="path-input-browse-btn btn-browse-secondary">
                        <span class="browse-icon">üìÅ</span>
                        Set Folder
                    </button>
                </div>
            </form>
        </div>
        
        <!-- Document Selection -->
        @if (ViewBag.AvailableDocuments.Count > 0)
        {
            <form asp-action="SelectDocuments" method="post">
                <div class="form-group">
                    <label class="form-label checkbox-group-title">Select coding standards:</label>
                    <div class="form-check-group-enhanced">
                        @foreach (var doc in ViewBag.AvailableDocuments)
                        {
                            <label class="custom-checkbox-container" for="doc_@doc">
                                <input class="custom-checkbox-input" type="checkbox"
                                       name="selectedDocuments" value="@doc"
                                       id="doc_@doc"
                                       @(ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Contains(doc) ? "checked" : "")
                                       onchange="toggleCheckbox(this)">
                                <span class="custom-checkbox-visual"></span>
                                <span class="custom-checkbox-label">@DocumentService.GetDocumentDisplayName(doc)</span>
                            </label>
                        }
                    </div>
                </div>
                <div class="button-group">
                    <button type="submit" class="btn btn-primary">Apply Selection</button>
                </div>
            </form>
        }
        else if (!string.IsNullOrEmpty(ViewBag.DocumentsFolder))
        {
            <div class="alert alert-info alert-custom">
                <div class="d-flex align-items-center">
                    <span class="me-2">üìã</span>
                    <span>No .md documents found in the specified folder</span>
                </div>
            </div>
        }
        
        <!-- Selected Documents Summary -->
        @if (ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Count > 0)
        {
            <div class="alert alert-success alert-custom">
                <div class="d-flex align-items-center">
                    <span class="me-2">‚úÖ</span>
                    <div>
                        <strong>Selected Documents:</strong>
                        <span class="helper-text d-block">@string.Join(", ", ((List<string>)ViewBag.SelectedDocuments).Select(doc => DocumentService.GetDocumentDisplayName(doc)))</span>
                    </div>
                </div>
            </div>
        }
        
        <!-- Document Scan Error -->
        @if (ViewBag.DocumentScanError != null)
        {
            <div class="alert alert-warning alert-custom">
                <div class="d-flex align-items-center">
                    <span class="me-2">‚ö†Ô∏è</span>
                    <span>@ViewBag.DocumentScanError</span>
                </div>
            </div>
        }
    </div>
    
    <!-- Language Selection Section -->
    <div class="content-section">
        <h2 class="section-heading-enhanced">
            <span class="section-icon" aria-label="Configuration settings icon">‚öôÔ∏è</span>
            Programming Language
        </h2>
        <p class="section-subtitle">Choose the programming language for code analysis.</p>
        <div class="form-group">
            <label for="languageSelect" class="form-label">Select the programming language for analysis:</label>
            <select class="form-select" id="languageSelect" name="language">
                <option value="NET" selected>.NET</option>
                <option value="Python">Python</option>
            </select>
        </div>
    </div>
    
    <!-- Repository Path Section -->
    <div class="content-section">
        <h2 class="section-heading-enhanced">
            <span class="section-icon" aria-label="Folder repository icon">üìÅ</span>
            Select Project Repository
        </h2>
        <p class="section-subtitle">Choose the local path to your Git repository for analysis.</p>
        
        <!-- Repository Path Configuration -->
        <div class="form-group">
            <form asp-action="SetRepositoryPath" method="post">
                <label class="form-label">Repository Path</label>
                <div class="input-group-enhanced">
                    <div class="path-input-container path-input-drop-zone" data-input-type="repository">
                        <div class="path-input-group">
                            <span class="path-input-icon" aria-label="Repository folder icon">üìÅ</span>
                            <input type="text" class="path-input-field" name="repositoryPath"
                                   placeholder="Enter repository path"
                                   value="@ViewBag.RepositoryPath"
                                   id="repositoryPathInput"
                                   data-full-path="@ViewBag.RepositoryPath"
                                   aria-label="Repository path"
                                   data-truncate="true"
                                   data-tooltip="Repository path">
                            <div class="path-input-tooltip"></div>
                        </div>
                        <div class="path-input-drop-indicator">Drop folder here</div>
                    </div>
                    <button type="button" class="path-input-browse-btn btn-browse-primary" onclick="openDirectoryBrowser()">
                        <span class="browse-icon">üìÅ</span>
                        Browse
                    </button>
                    <button type="submit" class="path-input-browse-btn btn-browse-secondary">
                        <span class="browse-icon">‚úÖ</span>
                        Set Repository
                    </button>
                </div>
            </form>
        </div>
        
        <!-- Directory Browser Modal -->
        <div class="modal fade" id="directoryBrowserModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content modal-content-enhanced">
                    <div class="modal-header modal-header-enhanced">
                        <h5 class="modal-title subsection-heading">
                            <span class="section-icon" aria-label="Folder icon">üìÅ</span>
                            Select Repository Directory
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body modal-body-enhanced">
                        <div class="form-group">
                            <div class="input-group-custom">
                                <input type="text" class="form-control" id="currentDirectoryPath" readonly>
                                <button class="btn btn-outline-secondary" type="button" onclick="navigateToParent()">
                                    ‚¨ÜÔ∏è Up
                                </button>
                                <button class="btn btn-outline-primary" type="button" onclick="selectCurrentDirectory()">
                                    ‚úÖ Select This Folder
                                </button>
                            </div>
                        </div>
                        
                        <div class="file-browser-container">
                            <div id="directoryBrowserLoading" class="loading-container" style="display: none;">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <span class="loading-text">Loading directories...</span>
                            </div>
                            
                            <div id="directoryBrowserContent">
                                <!-- Directory content will be loaded here -->
                            </div>
                            
                            <div id="directoryBrowserError" class="alert alert-danger" style="display: none;">
                                <!-- Error messages will appear here -->
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer modal-footer-enhanced">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="selectCurrentDirectory()">Select Folder</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Analysis Type Selection -->
        <div class="form-group">
            <h3 class="subsection-heading">üîç Analysis Type</h3>
            <div class="form-check-group">
                <div class="form-check-item">
                    <input class="form-check-input" type="radio" name="analysisType" id="uncommittedChanges" value="uncommitted" checked>
                    <label class="form-check-label" for="uncommittedChanges">
                        Uncommitted Changes
                    </label>
                </div>
                <div class="form-check-item">
                    <input class="form-check-input" type="radio" name="analysisType" id="specificCommit" value="commit">
                    <label class="form-check-label" for="specificCommit">
                        Specific Commit
                    </label>
                </div>
                <div class="form-check-item">
                    <input class="form-check-input" type="radio" name="analysisType" id="singleFile" value="singlefile">
                    <label class="form-check-label" for="singleFile">
                        Single File
                    </label>
                </div>
            </div>
            <div class="form-group" id="commitIdContainer" style="display: none;">
                <label class="form-label">Commit ID</label>
                <div class="input-group-custom">
                    <input type="text" class="form-control" id="commitId" name="commitId"
                           placeholder="Enter commit ID (full or partial hash)">
                    <button class="btn btn-outline-secondary" type="button" id="validateCommit">Validate</button>
                </div>
                <div id="commitValidationResult" class="validation-message"></div>
            </div>
            <div class="form-group" id="filePickerContainer" style="display: none;">
                <label class="form-label">File Path</label>
                <div class="input-group-custom">
                    <input type="text" class="form-control" id="filePath" name="filePath"
                           placeholder="Enter full file path (e.g., C:\path\to\file.py or /path/to/file.py)">
                    <button class="btn btn-outline-secondary" type="button" id="browseFile">Browse</button>
                    <input type="file" id="fileInput" accept=".cs,.js,.py" style="display: none;">
                </div>
                <div id="fileValidationResult" class="validation-message"></div>
                <div class="helper-text">
                    <strong>Note:</strong> Due to browser security, file browsing only provides the filename.
                    Please enter the <strong>full file path</strong> manually or use the repository-relative path.
                    Supported types: .cs (C#), .js (JavaScript), .py (Python)
                </div>
            </div>
        </div>
        
        <!-- Git Diff Display -->
        <div id="gitDiffSection" class="form-group">
            @if (ViewBag.GitDiff != null)
            {
                @if (ViewBag.GitDiffError)
                {
                    <div class="alert alert-warning alert-custom">
                        <div class="d-flex align-items-center">
                            <span class="me-2">‚ö†Ô∏è</span>
                            <span>@ViewBag.GitDiff</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card-enhanced">
                        <div class="card-header-enhanced bg-info text-white">
                            <h6 class="mb-0">
                                <button class="btn btn-link text-white" type="button" data-bs-toggle="collapse" data-bs-target="#gitDiffCollapse">
                                    üìä Git Changes (Click to expand/collapse)
                                </button>
                            </h6>
                        </div>
                        <div class="collapse" id="gitDiffCollapse">
                            <div class="card-body-enhanced">
                                <pre class="git-diff-text" style="white-space: pre-wrap; font-family: monospace; font-size: 0.8em; max-height: 300px; overflow-y: auto;">@ViewBag.GitDiff</pre>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        
        <!-- Commit Analysis Info (shown when specific commit is selected) -->
        <div id="commitAnalysisInfo" class="status-indicator" style="display: none;">
            <div class="icon">üîç</div>
            <div class="content">
                <strong>Commit Analysis Mode</strong>
                <span class="helper-text">Enter a commit ID above and click "Validate" to analyze a specific commit.</span>
            </div>
        </div>

        <!-- Single File Analysis Info (shown when single file is selected) -->
        <div id="singleFileAnalysisInfo" class="status-indicator" style="display: none;">
            <div class="icon">üìÑ</div>
            <div class="content">
                <strong>Single File Analysis Mode</strong>
                <span class="helper-text">Enter a file path above (.cs, .js, .py files) or click "Browse" to select a file for analysis.</span>
            </div>
        </div>
    </div>
    
    <!-- AI Analysis Section -->
    <div class="content-section">
        <h2 class="section-heading-enhanced">
            <span class="section-icon" aria-label="AI robot icon">ü§ñ</span>
            AI Code Analysis
        </h2>
        <p class="section-subtitle">Analyze your code against the selected coding standards.</p>
        
        <!-- Progress Container -->
        <div id="progressContainer" style="display: none;" class="progress-section">
            <div class="loading-container">
                <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
                <div>
                    <div id="progressMessage" class="loading-text">Starting analysis...</div>
                    <div class="helper-text mt-8">Status: <span id="status">Waiting...</span></div>
                </div>
            </div>
        </div>
        
        <!-- Analysis Result Display -->
        <div id="analysisResult" style="display: none;">
            <div class="card-enhanced">
                <div class="card-header-enhanced bg-success text-white">
                    <h6 class="mb-0">üîç AI Analysis Results</h6>
                </div>
                <div class="card-body-enhanced">
                    <pre id="result" style="white-space: pre-wrap; font-family: monospace;"></pre>
                </div>
            </div>
        </div>
        
        <!-- Run Analysis Form -->
        @if (ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Count > 0)
        {
            <div id="analysisForm" class="button-group">
                <button type="button" class="btn btn-success btn-lg" onclick="startAnalysis()">
                    üöÄ Run AI Analysis
                </button>
            </div>
        }
        else
        {
            <div class="alert alert-info alert-custom">
                <div class="d-flex align-items-center">
                    <span class="me-2">üìã</span>
                    <span>Please select coding standards documents above to enable AI analysis</span>
                </div>
            </div>
        }
        
        <!-- Analysis Results - Always include but conditionally show/hide -->
        <div class="results-section" id="analysisResultsSection" data-analysis-id="@(string.IsNullOrEmpty(analysisId) ? "" : analysisId)" style="@((!string.IsNullOrEmpty(analysisId) || !string.IsNullOrEmpty(analysisResult) || !string.IsNullOrEmpty(analysisError)) ? "" : "display: none;")">
            <div class="d-flex justify-content-between align-items-center mb-24">
                <h3 class="subsection-heading">üîç AI Analysis Results</h3>
                <div class="btn-group" role="group" id="analysisButtonsContainer">
                    <!-- Buttons will be injected here by JS if needed -->
                </div>
            </div>
            
            <!-- Bottom Panel View -->
            <div id="bottomPanelView">
                @if (!string.IsNullOrEmpty(analysisResult))
                {
                    <div class="card-enhanced">
                        <div class="card-header-enhanced bg-success text-white">
                            <h6 class="mb-0">Analysis Results</h6>
                        </div>
                        <div class="card-body-enhanced">
                            <pre class="analysis-text" style="white-space: pre-wrap; font-family: monospace;">@analysisResult</pre>
                        </div>
                    </div>
                }
                else
                {
                    <div class="loading-container">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        <span class="loading-text">Analysis results will appear here...</span>
                    </div>
                }
            </div>
            
            <!-- Side Panel View (initially hidden) -->
            <div id="sidePanelView" style="display: none;">
                <div class="loading-container">
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    <span class="loading-text">Loading side-panel view...</span>
                </div>
            </div>
        </div>
        
        @if (!string.IsNullOrEmpty(analysisError))
        {
            <div class="alert alert-danger alert-custom" id="analysisErrorSection">
                <div class="d-flex align-items-center">
                    <span class="me-2">‚ùå</span>
                    <span>@analysisError</span>
                </div>
            </div>
        }
    </div>

</div>

<!-- SignalR Client Library -->
<script src="https://unpkg.com/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>

<script>
    // View switching functions - use the global currentAnalysisId from site.js
    function switchToBottomPanel() {
        const bottomPanelView = document.getElementById('bottomPanelView');
        const sidePanelView = document.getElementById('sidePanelView');
        const bottomPanelBtn = document.getElementById('bottomPanelBtn');
        const sidePanelBtn = document.getElementById('sidePanelBtn');
        
        if (bottomPanelView) bottomPanelView.style.display = 'block';
        if (sidePanelView) sidePanelView.style.display = 'none';
        
        // Update button states
        if (bottomPanelBtn) {
            bottomPanelBtn.classList.remove('btn-outline-primary');
            bottomPanelBtn.classList.add('btn-primary');
        }
        if (sidePanelBtn) {
            sidePanelBtn.classList.remove('btn-primary');
            sidePanelBtn.classList.add('btn-outline-primary');
        }
        
        console.log('Switched to bottom panel view');
    }
    
    function switchToSidePanel() {
        const bottomPanelView = document.getElementById('bottomPanelView');
        const sidePanelView = document.getElementById('sidePanelView');
        const bottomPanelBtn = document.getElementById('bottomPanelBtn');
        const sidePanelBtn = document.getElementById('sidePanelBtn');
        
        if (bottomPanelView) bottomPanelView.style.display = 'none';
        if (sidePanelView) sidePanelView.style.display = 'block';
        
        // Update button states
        if (sidePanelBtn) {
            sidePanelBtn.classList.remove('btn-outline-primary');
            sidePanelBtn.classList.add('btn-primary');
        }
        if (bottomPanelBtn) {
            bottomPanelBtn.classList.remove('btn-primary');
            bottomPanelBtn.classList.add('btn-outline-primary');
        }
        
        // Load side panel view
        loadSidePanelView();
        
        console.log('Switched to side panel view');
    }
    
    function loadSidePanelView() {
        // Use the global currentAnalysisId from site.js
        if (!window.currentAnalysisId) {
            const sidePanelView = document.getElementById('sidePanelView');
            if (sidePanelView) {
                sidePanelView.innerHTML = '<div class="alert alert-warning">No analysis ID available for side-panel view</div>';
            }
            return;
        }
        
        // Show loading state
        const sidePanelView = document.getElementById('sidePanelView');
        if (sidePanelView) {
            sidePanelView.innerHTML =
                '<div class="alert alert-info">' +
                '<div class="d-flex align-items-center">' +
                '<div class="spinner-border spinner-border-sm me-2" role="status"></div>' +
                '<span>Loading side-panel view...</span>' +
                '</div>' +
                '</div>';
        }
        
        // Redirect to results page with the analysis ID
        window.location.href = `/results/${window.currentAnalysisId}`;
    }
    
    // Initialize view based on current state
    document.addEventListener('DOMContentLoaded', function() {
        // Only initialize if the view switching elements exist
        const analysisResultsSection = document.getElementById('analysisResultsSection');
        if (analysisResultsSection) {
            // Set initial state to bottom panel view
            switchToBottomPanel();
            
            // Hide the old analysis result section if it exists
            const oldResult = document.querySelector('.analysis-results pre');
            if (oldResult && oldResult.parentElement.parentElement.classList.contains('card')) {
                oldResult.parentElement.parentElement.parentElement.style.display = 'none';
            }
        }
    });
    
    // Function to dynamically inject the view-switching buttons
    function injectAnalysisButtons() {
        const container = document.getElementById('analysisButtonsContainer');
        const analysisId = document.getElementById('analysisResultsSection')?.dataset.analysisId;
        
        console.log('üîÑ injectAnalysisButtons called, analysisId:', analysisId);
        
        // If no analysis ID yet, don't inject (check for null, undefined, or empty string)
        if (!analysisId || analysisId === '') {
            console.log('‚ùå No analysisId found, skipping button injection');
            return;
        }

        // Prevent duplicate injection
        if (container.querySelector('#bottomPanelBtn')) {
            console.log('‚úÖ Buttons already injected, skipping');
            return;
        }

        console.log('üîß Creating analysis buttons...');

        // Create buttons
        const bottomBtn = document.createElement('button');
        bottomBtn.type = 'button';
        bottomBtn.className = 'btn btn-outline-primary';
        bottomBtn.id = 'bottomPanelBtn';
        bottomBtn.onclick = switchToBottomPanel;
        bottomBtn.textContent = 'üìã Bottom Panel';

        const sideBtn = document.createElement('button');
        sideBtn.type = 'button';
        sideBtn.className = 'btn btn-outline-primary';
        sideBtn.id = 'sidePanelBtn';
        sideBtn.onclick = switchToSidePanel;
        sideBtn.textContent = 'üîÄ Side Panel';

        // Clear container and append
        container.innerHTML = '';
        container.appendChild(bottomBtn);
        container.appendChild(sideBtn);

        // Initially set to bottom panel
        switchToBottomPanel();

        console.log('‚úÖ Analysis buttons injected dynamically');
    }
    
    // Only run if the section exists
    document.addEventListener('DOMContentLoaded', function() {
        const section = document.getElementById('analysisResultsSection');
        if (section) {
            console.log('‚úÖ analysisResultsSection found, injecting buttons...');
            injectAnalysisButtons();
            
            // Poll for new analysisId (in case it gets updated dynamically)
            setInterval(() => {
                const section = document.getElementById('analysisResultsSection');
                const analysisId = section?.dataset.analysisId;
                if (section && analysisId && analysisId !== '' && !section.querySelector('#bottomPanelBtn')) {
                    console.log('üîÑ Polling: Found valid analysisId, injecting buttons...');
                    injectAnalysisButtons();
                }
            }, 2000);
        } else {
            console.log('‚ÑπÔ∏è analysisResultsSection hidden - no analysis data available yet');
        }
    });
    
    // Make it globally available
    window.injectAnalysisButtons = injectAnalysisButtons;
    
    // Radio button change handler for analysis type
    document.addEventListener('DOMContentLoaded', function() {
        const uncommittedRadio = document.getElementById('uncommittedChanges');
        const commitRadio = document.getElementById('specificCommit');
        const singleFileRadio = document.getElementById('singleFile');
        const commitIdContainer = document.getElementById('commitIdContainer');
        const commitIdInput = document.getElementById('commitId');
        const filePickerContainer = document.getElementById('filePickerContainer');
        const filePathInput = document.getElementById('filePath');
        
        function toggleAnalysisTypeFields() {
            const gitDiffSection = document.getElementById('gitDiffSection');
            const commitAnalysisInfo = document.getElementById('commitAnalysisInfo');
            const singleFileAnalysisInfo = document.getElementById('singleFileAnalysisInfo');
            
            // Initialize on first call
            if (!gitDiffSection || !commitAnalysisInfo || !singleFileAnalysisInfo) {
                console.log('Elements not found, skipping toggle');
                return;
            }
            
            if (commitRadio.checked) {
                commitIdContainer.style.display = 'block';
                commitIdInput.required = true;
                filePickerContainer.style.display = 'none';
                filePathInput.required = false;
                
                // Hide git diff section and show commit analysis info
                gitDiffSection.style.display = 'none';
                commitAnalysisInfo.style.display = 'block';
                singleFileAnalysisInfo.style.display = 'none';
            } else if (singleFileRadio.checked) {
                commitIdContainer.style.display = 'none';
                commitIdInput.required = false;
                commitIdInput.value = '';
                document.getElementById('commitValidationResult').innerHTML = '';
                filePickerContainer.style.display = 'block';
                filePathInput.required = true;
                
                // Hide git diff section and show single file analysis info
                gitDiffSection.style.display = 'none';
                commitAnalysisInfo.style.display = 'none';
                singleFileAnalysisInfo.style.display = 'block';
            } else {
                commitIdContainer.style.display = 'none';
                commitIdInput.required = false;
                commitIdInput.value = '';
                document.getElementById('commitValidationResult').innerHTML = '';
                filePickerContainer.style.display = 'none';
                filePathInput.required = false;
                filePathInput.value = '';
                document.getElementById('fileValidationResult').innerHTML = '';
                
                // Show git diff section and hide analysis info
                gitDiffSection.style.display = 'block';
                commitAnalysisInfo.style.display = 'none';
                singleFileAnalysisInfo.style.display = 'none';
            }
        }
        
        // Initialize the UI state based on the default radio button selection
        toggleAnalysisTypeFields();
        
        uncommittedRadio.addEventListener('change', toggleAnalysisTypeFields);
        commitRadio.addEventListener('change', toggleAnalysisTypeFields);
        singleFileRadio.addEventListener('change', toggleAnalysisTypeFields);
        
        // Validate commit button handler
        document.getElementById('validateCommit').addEventListener('click', async function() {
            const commitId = commitIdInput.value.trim();
            const validationResult = document.getElementById('commitValidationResult');
            const repositoryPath = '@Html.Raw(ViewBag.RepositoryPath)';
            
            console.log('Validating commit:', commitId);
            console.log('Repository path:', repositoryPath);
            
            if (!commitId) {
                validationResult.innerHTML = '<span class="text-warning">Please enter a commit ID</span>';
                return;
            }
            
            validationResult.innerHTML = '<span class="text-info">Validating...</span>';
            
            try {
                const response = await fetch('/Home/ValidateCommit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        commitId: commitId,
                        repositoryPath: repositoryPath
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    validationResult.innerHTML = '<span class="text-success">‚úì Valid commit: ' + result.message + '</span>';
                } else {
                    validationResult.innerHTML = '<span class="text-danger">‚úó ' + result.error + '</span>';
                }
            } catch (error) {
                validationResult.innerHTML = '<span class="text-danger">‚úó Validation failed: ' + error.message + '</span>';
            }
        });

        // File validation function
        function validateFilePath(filePath) {
            const validationResult = document.getElementById('fileValidationResult');
            
            if (!filePath) {
                validationResult.innerHTML = '<span class="text-warning">Please select or enter a file path</span>';
                return false;
            }
            
            const allowedExtensions = ['.cs', '.js', '.py'];
            const extension = filePath.toLowerCase().substring(filePath.lastIndexOf('.'));
            
            if (!allowedExtensions.includes(extension)) {
                validationResult.innerHTML = '<span class="text-danger">‚úó Unsupported file type. Allowed: ' + allowedExtensions.join(', ') + '</span>';
                return false;
            }
            
            validationResult.innerHTML = '<span class="text-success">‚úì File type supported</span>';
            return true;
        }

        // File path input validation
        filePathInput.addEventListener('input', function() {
            const filePath = this.value.trim();
            if (filePath) {
                validateFilePath(filePath);
            } else {
                document.getElementById('fileValidationResult').innerHTML = '';
            }
        });

        // Browse file button handler - triggers hidden file input
        document.getElementById('browseFile').addEventListener('click', function() {
            document.getElementById('fileInput').click();
        });

        // Handle file selection from file input
        document.getElementById('fileInput').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file) {
                // Browsers don't provide full path for security reasons
                const fileNameOnly = file.name;
                
                // Clear the input and show a message to user
                filePathInput.value = '';
                
                // Store the file object for potential future use
                window.selectedFile = file;
                
                // Provide feedback about the selected file and instructions
                const validationResult = document.getElementById('fileValidationResult');
                validationResult.innerHTML = '<span class="text-info">üìÅ File selected: ' + file.name + ' (' + Math.round(file.size / 1024) + ' KB)</span><br>' +
                    '<span class="text-warning">‚ö†Ô∏è Please enter the full file path above (browsers don\'t provide full paths for security)</span>';
                
                // Focus on the file path input to encourage manual entry
                filePathInput.focus();
                
                console.log('[DEBUG] File selected via browser:', fileNameOnly);
                console.log('[DEBUG] User needs to manually enter full path');
            }
        });

        // Allow drag and drop for file selection (enhanced UX)
        filePathInput.addEventListener('dragover', function(event) {
            event.preventDefault();
            this.style.backgroundColor = '#f0f0f0';
            this.style.borderColor = '#007bff';
        });

        filePathInput.addEventListener('dragleave', function(event) {
            event.preventDefault();
            this.style.backgroundColor = '';
            this.style.borderColor = '';
        });

        filePathInput.addEventListener('drop', function(event) {
            event.preventDefault();
            this.style.backgroundColor = '';
            this.style.borderColor = '';
            
            const files = event.dataTransfer.files;
            if (files.length > 0) {
                const file = files[0];
                const fileNameOnly = file.name;
                
                // Clear the input and show a message to user
                this.value = '';
                
                // Store the file object for potential future use
                window.selectedFile = file;
                
                // Provide feedback about the selected file and instructions
                const validationResult = document.getElementById('fileValidationResult');
                validationResult.innerHTML = '<span class="text-info">üìÅ File dropped: ' + file.name + ' (' + Math.round(file.size / 1024) + ' KB)</span><br>' +
                    '<span class="text-warning">‚ö†Ô∏è Please enter the full file path above (drag & drop only provides filename)</span>';
                
                // Focus on the file path input to encourage manual entry
                this.focus();
                
                console.log('[DEBUG] File dropped via drag & drop:', fileNameOnly);
                console.log('[DEBUG] User needs to manually enter full path');
            }
        });

        // Enhanced checkbox functionality
        function toggleCheckbox(checkbox) {
            const container = checkbox.closest('.custom-checkbox-container');
            const visual = container.querySelector('.custom-checkbox-visual');
            
            if (checkbox.checked) {
                visual.classList.add('checked');
                container.classList.add('checked');
                container.setAttribute('aria-checked', 'true');
            } else {
                visual.classList.remove('checked');
                container.classList.remove('checked');
                container.setAttribute('aria-checked', 'false');
            }
        }

        // Initialize checkboxes on page load
        document.addEventListener('DOMContentLoaded', function() {
            const checkboxes = document.querySelectorAll('.custom-checkbox-input');
            checkboxes.forEach(function(checkbox) {
                toggleCheckbox(checkbox);
            });
        });

        // Add keyboard navigation support
        document.addEventListener('keydown', function(e) {
            if (e.target.classList.contains('custom-checkbox-container') ||
                e.target.closest('.custom-checkbox-container')) {
                const container = e.target.closest('.custom-checkbox-container');
                const checkbox = container.querySelector('.custom-checkbox-input');
                
                if (e.key === ' ' || e.key === 'Enter') {
                    e.preventDefault();
                    checkbox.checked = !checkbox.checked;
                    toggleCheckbox(checkbox);
                }
            }
        });

        // Make containers focusable and keyboard navigable
        document.querySelectorAll('.custom-checkbox-container').forEach(function(container) {
            container.setAttribute('tabindex', '0');
            container.setAttribute('role', 'checkbox');
            
            const checkbox = container.querySelector('.custom-checkbox-input');
            if (checkbox.checked) {
                container.setAttribute('aria-checked', 'true');
            } else {
                container.setAttribute('aria-checked', 'false');
            }
        });

        // Enhanced path input functionality
        function truncatePath(path, maxLength = 50) {
            if (!path || path.length <= maxLength) return path;
            
            const parts = path.split(/[\\/]/);
            if (parts.length <= 2) return path;
            
            const filename = parts[parts.length - 1];
            const parentDir = parts[parts.length - 2];
            const ellipsis = '...';
            
            const truncated = ellipsis + parentDir + '/' + filename;
            return truncated.length <= maxLength ? truncated : ellipsis + filename;
        }

        function updatePathDisplay(input) {
            const fullPath = input.dataset.fullPath || input.value;
            const displayPath = truncatePath(fullPath);
            
            // Update the input display
            input.value = displayPath;
            
            // Update tooltip with full path
            const tooltip = input.parentElement.querySelector('.path-input-tooltip');
            if (tooltip) {
                tooltip.textContent = fullPath;
            }
            
            // Update aria-label
            input.setAttribute('aria-label', `Path: ${fullPath}`);
        }

        function initializePathInputs() {
            document.querySelectorAll('.path-input-field').forEach(function(input) {
                // Store full path
                if (input.value && !input.dataset.fullPath) {
                    input.dataset.fullPath = input.value;
                }
                
                // Set up tooltip
                const tooltip = input.parentElement.querySelector('.path-input-tooltip');
                if (tooltip) {
                    input.addEventListener('mouseenter', function() {
                        tooltip.textContent = input.dataset.fullPath || input.value;
                    });
                    
                    input.addEventListener('focus', function() {
                        tooltip.textContent = input.dataset.fullPath || input.value;
                    });
                }
                
                // Update display
                updatePathDisplay(input);
                
                // Handle click to show full path
                input.addEventListener('click', function() {
                    const fullPath = this.dataset.fullPath || this.value;
                    if (fullPath && this.value !== fullPath) {
                        this.value = fullPath;
                        this.select();
                    }
                });
                
                // Handle blur to restore truncated view
                input.addEventListener('blur', function() {
                    updatePathDisplay(this);
                });
                
                // Handle input changes
                input.addEventListener('input', function() {
                    this.dataset.fullPath = this.value;
                    updatePathDisplay(this);
                });
            });
        }

        // Drag and drop functionality
        function setupDragAndDrop() {
            const dropZones = document.querySelectorAll('.path-input-drop-zone');
            
            dropZones.forEach(function(zone) {
                const input = zone.querySelector('.path-input-field');
                const indicator = zone.querySelector('.path-input-drop-indicator');
                const inputType = zone.dataset.inputType;
                
                zone.addEventListener('dragover', function(e) {
                    e.preventDefault();
                    zone.classList.add('drag-over');
                    if (indicator) indicator.classList.add('active');
                });
                
                zone.addEventListener('dragleave', function(e) {
                    if (!zone.contains(e.relatedTarget)) {
                        zone.classList.remove('drag-over');
                        if (indicator) indicator.classList.remove('active');
                    }
                });
                
                zone.addEventListener('drop', function(e) {
                    e.preventDefault();
                    zone.classList.remove('drag-over');
                    if (indicator) indicator.classList.remove('active');
                    
                    const items = e.dataTransfer.items;
                    if (items && items.length > 0) {
                        const item = items[0];
                        if (item.kind === 'file' && item.type === '') {
                            // This is likely a folder
                            const entry = item.webkitGetAsEntry();
                            if (entry && entry.isDirectory) {
                                // For security reasons, we can't get the full path
                                // But we can indicate a folder was dropped
                                input.value = entry.name;
                                input.dataset.fullPath = entry.name;
                                updatePathDisplay(input);
                                
                                // Provide feedback
                                const tooltip = input.parentElement.querySelector('.path-input-tooltip');
                                if (tooltip) {
                                    tooltip.textContent = `Folder dropped: ${entry.name} (full path not available for security)`;
                                }
                            }
                        }
                    }
                    
                    const files = e.dataTransfer.files;
                    if (files && files.length > 0) {
                        // Handle file drops (though we prefer folders)
                        const file = files[0];
                        const path = file.webkitRelativePath || file.name;
                        input.value = path;
                        input.dataset.fullPath = path;
                        updatePathDisplay(input);
                    }
                });
            });
        }

        // Initialize path inputs on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializePathInputs();
            setupDragAndDrop();
        });

        // Make browse buttons more accessible
        document.querySelectorAll('.path-input-browse-btn').forEach(function(btn) {
            btn.setAttribute('aria-label', 'Browse for folder');
            btn.setAttribute('role', 'button');
            btn.setAttribute('tabindex', '0');
        });

        // Enhanced keyboard navigation for path inputs
        document.addEventListener('keydown', function(e) {
            if (e.target.classList.contains('path-input-field')) {
                if (e.key === 'Enter') {
                    const fullPath = e.target.dataset.fullPath || e.target.value;
                    if (fullPath && e.target.value !== fullPath) {
                        e.preventDefault();
                        e.target.value = fullPath;
                        e.target.select();
                    }
                }
            }
            
            if (e.target.classList.contains('path-input-browse-btn') && (e.key === 'Enter' || e.key === ' ')) {
                e.preventDefault();
                e.target.click();
            }
        });
    });
</script>
