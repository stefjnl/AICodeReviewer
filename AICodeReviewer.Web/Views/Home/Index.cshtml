@{
    ViewData["Title"] = "Home Page";
    var analysisResult = Context.Session.GetString("AnalysisResult");
    var analysisError = Context.Session.GetString("AnalysisError");
    var analysisId = Context.Session.GetString("AnalysisId");
}

<div class="text-center workflow-main-container">
    <h1 class="display-4">Welcome</h1>
    
    <!-- Debug info for development -->
    <script>
        console.log('üìä Session Debug Info:');
        console.log('Analysis ID: @(analysisId ?? "null")');
        console.log('Analysis Result: @(analysisResult ?? "null")');
        console.log('Analysis Error: @(analysisError ?? "null")');
        
        // Set global analysis ID for view switching
        @if (!string.IsNullOrEmpty(analysisId))
        {
            <text>
            window.currentAnalysisId = '@analysisId';
            console.log('üÜî Set window.currentAnalysisId to:', window.currentAnalysisId);
            </text>
        }
    </script>
    
    @if (ViewBag.BranchInfo != null)
    {
        <div class="git-status">
            @if (ViewBag.IsError)
            {
                <div class="workflow-alert workflow-alert-warning" role="alert">
                    ‚ö†Ô∏è @ViewBag.BranchInfo
                </div>
            }
            else
            {
                <div class="workflow-alert workflow-alert-success" role="alert">
                    üåø Current branch: <strong>@ViewBag.BranchInfo</strong>
                </div>
            }
        </div>
    }
    
    <!-- Workflow Container -->
    <!-- Workflow Container -->
    <div class="workflow-container">

        <!-- Document Management Section -->
        <div class="workflow-section">
            <h5>üìÅ Requirements Documents</h5>

            <!-- Folder Configuration -->
            <div class="mb-3">
                <form asp-action="SetDocumentsFolder" method="post">
                    <div class="workflow-input-group">
                        <input type="text" class="workflow-form-control" name="folderPath"
                               placeholder="Documents folder path"
                               value="@ViewBag.DocumentsFolder">
                        <button class="workflow-btn workflow-btn-secondary" type="submit">Set Folder</button>
                    </div>
                </form>
            </div>

            <!-- Document Selection -->
            <div class="flow-item" onclick="toggleStandardsSelector()" tabindex="0">
                <span class="icon">üìÑ</span>
                <span class="value" id="standardsValue">
                    @if (ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Count > 0)
                    {
                        @($"Selected: {string.Join(", ", ((List<string>)ViewBag.SelectedDocuments).Select(doc => DocumentService.GetDocumentDisplayName(doc)))}")
                    }
                    else
                    {
                        <em>No documents selected</em>
                    }
                </span>
                <span class="edit-icon">‚úèÔ∏è</span>
            </div>

            <!-- Hidden form that appears on click -->
            <div id="standardsDropdown" class="workflow-dropdown" style="display: none;">
                @if (ViewBag.AvailableDocuments.Count > 0)
                {
                    <form asp-action="SelectDocuments" method="post">
                        <div class="mb-3">
                            <label>Select coding standards:</label>
                            @foreach (var doc in ViewBag.AvailableDocuments)
                            {
                                <div class="workflow-form-check">
                                    <input class="workflow-form-check-input" type="checkbox"
                                           name="selectedDocuments" value="@doc"
                                           @(ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Contains(doc) ? "checked" : "")>
                                    <label class="workflow-form-check-label">@DocumentService.GetDocumentDisplayName(doc)</label>
                                </div>
                            }
                        </div>
                        <button type="submit" class="workflow-btn workflow-btn-primary">Apply Selection</button>
                    </form>
                }
                else if (!string.IsNullOrEmpty(ViewBag.DocumentsFolder))
                {
                    <div class="workflow-alert workflow-alert-info">
                        üìã No .md documents found in folder
                    </div>
                }
            </div>

            <!-- Selected Documents Summary -->
            @if (ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Count > 0)
            {
                <div class="workflow-alert workflow-alert-success mt-3">
                    ‚úÖ Selected: <strong>@string.Join(", ", ((List<string>)ViewBag.SelectedDocuments).Select(doc => DocumentService.GetDocumentDisplayName(doc)))</strong>
                </div>
            }

            <!-- Document Scan Error -->
            @if (ViewBag.DocumentScanError != null)
            {
                <div class="workflow-alert workflow-alert-warning mt-3">
                    ‚ö†Ô∏è @ViewBag.DocumentScanError
                </div>
            }
        </div>

        <!-- Language Selection Section -->
        <div class="workflow-section">
            <h5>‚öôÔ∏è Programming Language</h5>

            <div class="flow-item" onclick="toggleLanguageSelector()" tabindex="0">
                <span class="icon">‚öôÔ∏è</span>
                <span class="value" id="languageValue">C# (.NET)</span>
                <span class="edit-icon">‚úèÔ∏è</span>
            </div>

            <!-- Hidden dropdown that appears on click -->
            <div id="languageDropdown" class="workflow-dropdown" style="display: none;">
                <select class="workflow-form-select" id="languageSelect" name="language">
                    <option value="NET" selected>.NET</option>
                    <option value="Python">Python</option>
                </select>
            </div>
        </div>

        <!-- Repository Path Section -->
        <div class="workflow-section">
            <h5>üìÅ Git Repository</h5>

            <!-- Repository Path Configuration -->
            <div class="mb-3">
                <form asp-action="SetRepositoryPath" method="post">
                    <div class="workflow-input-group">
                        <input type="text" class="workflow-form-control" name="repositoryPath"
                               placeholder="Repository path"
                               value="@ViewBag.RepositoryPath"
                               id="repositoryPathInput">
                        <button class="workflow-btn workflow-btn-secondary" type="button" onclick="openDirectoryBrowser()">
                            üìÅ Browse
                        </button>
                        <button class="workflow-btn workflow-btn-primary" type="submit">Set Repository</button>
                    </div>
                </form>
            </div>

            <!-- Directory Browser Modal -->
            <div class="modal fade" id="directoryBrowserModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="workflow-modal-content">
                        <div class="workflow-modal-header">
                            <h5 class="workflow-modal-title">üìÅ Select Repository Directory</h5>
                            <button type="button" class="workflow-btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="workflow-modal-body">
                            <div class="mb-3">
                                <div class="workflow-input-group">
                                    <input type="text" class="workflow-form-control" id="currentDirectoryPath" readonly>
                                    <button class="workflow-btn workflow-btn-secondary" type="button" onclick="navigateToParent()">
                                        ‚¨ÜÔ∏è Up
                                    </button>
                                    <button class="workflow-btn workflow-btn-primary" type="button" onclick="selectCurrentDirectory()">
                                        ‚úÖ Select This Folder
                                    </button>
                                </div>
                            </div>

                            <div class="directory-browser-container" style="max-height: 400px; overflow-y: auto;">
                                <div id="directoryBrowserLoading" class="text-center p-4" style="display: none;">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mt-2">Loading directories...</p>
                                </div>

                                <div id="directoryBrowserContent">
                                    <!-- Directory content will be loaded here -->
                                </div>

                                <div id="directoryBrowserError" class="workflow-alert workflow-alert-danger" style="display: none;">
                                    <!-- Error messages will appear here -->
                                </div>
                            </div>
                        </div>
                        <div class="workflow-modal-footer">
                            <button type="button" class="workflow-btn workflow-btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="workflow-btn workflow-btn-primary" onclick="selectCurrentDirectory()">Select Folder</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Analysis Type Selection -->
        <div class="workflow-section">
            <h5>üîç Analysis Type</h5>
            <div class="workflow-form-check">
                <input class="workflow-form-check-input" type="radio" name="analysisType" id="uncommittedChanges" value="uncommitted" checked>
                <label class="workflow-form-check-label" for="uncommittedChanges">
                    Uncommitted Changes
                </label>
            </div>
            <div class="workflow-form-check">
                <input class="workflow-form-check-input" type="radio" name="analysisType" id="specificCommit" value="commit">
                <label class="workflow-form-check-label" for="specificCommit">
                    Specific Commit
                </label>
            </div>
            <div class="workflow-form-check">
                <input class="workflow-form-check-input" type="radio" name="analysisType" id="singleFile" value="singlefile">
                <label class="workflow-form-check-label" for="singleFile">
                    Single File
                </label>
            </div>
            <div class="mt-2" id="commitIdContainer" style="display: none;">
                <div class="workflow-input-group">
                    <input type="text" class="workflow-form-control" id="commitId" name="commitId"
                           placeholder="Enter commit ID (full or partial hash)">
                    <button class="workflow-btn workflow-btn-secondary" type="button" id="validateCommit">Validate</button>
                </div>
                <div id="commitValidationResult" class="workflow-form-text"></div>
            </div>
            <div class="mt-2" id="filePickerContainer" style="display: none;">
                <div class="workflow-input-group">
                    <input type="text" class="workflow-form-control" id="filePath" name="filePath"
                           placeholder="Enter full file path (e.g., C:\path\to\file.py or /path/to/file.py)"
                           style="transition: background-color 0.3s, border-color 0.3s;">
                    <button class="workflow-btn workflow-btn-secondary" type="button" id="browseFile">Browse</button>
                    <input type="file" id="fileInput" accept=".cs,.js,.py" style="display: none;">
                </div>
                <div id="fileValidationResult" class="workflow-form-text"></div>
                <small class="workflow-text-muted">
                    <strong>Note:</strong> Due to browser security, file browsing only provides the filename.
                    Please enter the <strong>full file path</strong> manually or use the repository-relative path.
                    Supported types: .cs (C#), .js (JavaScript), .py (Python)
                </small>
            </div>
        </div>

        <!-- AI Analysis Section -->
        <div class="workflow-section workflow-analysis">
            <h5>ü§ñ AI Code Analysis</h5>

            <!-- Progress Container -->
            <div id="progressContainer" style="display: none;" class="mt-4">
                <div class="workflow-alert workflow-alert-info">
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
                        <span id="progressMessage">Starting analysis...</span>
                    </div>
                </div>
                <div class="mt-3">
                    <div class="fw-bold">Status:</div>
                    <div id="status">Waiting...</div>
                </div>
            </div>

            <!-- Analysis Result Display -->
            <div id="analysisResult" class="mt-4" style="display: none;">
                <div class="workflow-card">
                    <div class="workflow-card-header workflow-card-header-success">
                        <h6 class="mb-0">üîç AI Analysis Results</h6>
                    </div>
                    <div class="workflow-card-body">
                        <pre id="result" class="workflow-pre" style="white-space: pre-wrap; font-family: monospace;"></pre>
                    </div>
                </div>
            </div>

            <!-- Run Analysis Form -->
            @if (ViewBag.SelectedDocuments != null && ViewBag.SelectedDocuments.Count > 0)
            {
                <div id="analysisForm">
                    <button type="button" class="workflow-btn workflow-btn-success btn-lg" onclick="startAnalysis()">
                        üöÄ Run AI Analysis
                    </button>
                </div>
            }
            else
            {
                <div class="workflow-alert workflow-alert-info">
                    üìã Please select coding standards documents above to enable AI analysis
                </div>
            }
        </div>

    </div>

    <!-- Git Diff Display (Outside workflow-container) -->
    <div id="gitDiffSection" class="git-diff-section">
        @if (ViewBag.GitDiff != null)
        {
            @if (ViewBag.GitDiffError)
            {
                <div class="workflow-alert workflow-alert-warning">
                    ‚ö†Ô∏è @ViewBag.GitDiff
                </div>
            }
            else
            {
                <div class="workflow-card">
                    <div class="workflow-card-header">
                        <h6 class="mb-0">
                            <button class="workflow-btn workflow-btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#gitDiffCollapse">
                                üìä Git Changes (Click to expand/collapse)
                            </button>
                        </h6>
                    </div>
                    <div class="collapse" id="gitDiffCollapse">
                        <div class="workflow-card-body">
                            <pre class="git-diff-text workflow-pre" style="white-space: pre-wrap; font-family: monospace; font-size: 0.8em; max-height: 300px; overflow-y: auto;">@ViewBag.GitDiff</pre>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Commit Analysis Info (shown when specific commit is selected) -->
    <div id="commitAnalysisInfo" class="workflow-alert workflow-alert-info mt-3" style="display: none;">
        <div class="d-flex align-items-center">
            <div class="me-2">üîç</div>
            <div>
                <strong>Commit Analysis Mode</strong><br>
                <small>Enter a commit ID above and click "Validate" to analyze a specific commit.</small>
            </div>
        </div>
    </div>

    <!-- Single File Analysis Info (shown when single file is selected) -->
    <div id="singleFileAnalysisInfo" class="workflow-alert workflow-alert-info mt-3" style="display: none;">
        <div class="d-flex align-items-center">
            <div class="me-2">üìÑ</div>
            <div>
                <strong>Single File Analysis Mode</strong><br>
                <small>Enter a file path above (.cs, .js, .py files) or click "Browse" to select a file for analysis.</small>
            </div>
        </div>
    </div>

    <!-- Analysis Results - Always include but conditionally show/hide -->
    <div class="analysis-results mt-4" id="analysisResultsSection" data-analysis-id="@(string.IsNullOrEmpty(analysisId) ? "" : analysisId)" style="@((!string.IsNullOrEmpty(analysisId) || !string.IsNullOrEmpty(analysisResult) || !string.IsNullOrEmpty(analysisError)) ? "" : "display: none;")">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5>üîç AI Analysis Results</h5>
            <div class="btn-group" role="group" id="analysisButtonsContainer">
                <!-- Buttons will be injected here by JS if needed -->
            </div>
        </div>

        <!-- Bottom Panel View -->
        <div id="bottomPanelView">
            @if (!string.IsNullOrEmpty(analysisResult))
            {
                <div class="workflow-card">
                    <div class="workflow-card-header workflow-card-header-success">
                        <h6 class="mb-0">Analysis Results</h6>
                    </div>
                    <div class="workflow-card-body">
                        <pre class="analysis-text workflow-pre" style="white-space: pre-wrap; font-family: monospace;">@analysisResult</pre>
                    </div>
                </div>
            }
            else
            {
                <div class="workflow-alert workflow-alert-info">
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        <span>Analysis results will appear here...</span>
                    </div>
                </div>
            }
        </div>

        <!-- Side Panel View (initially hidden) -->
        <div id="sidePanelView" style="display: none;">
            <div class="workflow-alert workflow-alert-info">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    <span>Loading side-panel view...</span>
                </div>
            </div>
        </div>
    </div>

@if (!string.IsNullOrEmpty(analysisError))
{
        <div class="workflow-alert workflow-alert-danger mt-3" id="analysisErrorSection">
            ‚ùå @analysisError
        </div>
}

<!-- SignalR Client Library -->
<script src="https://unpkg.com/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>

<script>
    // View switching functions - use the global currentAnalysisId from site.js
    function switchToBottomPanel() {
        const bottomPanelView = document.getElementById('bottomPanelView');
        const sidePanelView = document.getElementById('sidePanelView');
        const bottomPanelBtn = document.getElementById('bottomPanelBtn');
        const sidePanelBtn = document.getElementById('sidePanelBtn');
        
        if (bottomPanelView) bottomPanelView.style.display = 'block';
        if (sidePanelView) sidePanelView.style.display = 'none';
        
        // Update button states
        if (bottomPanelBtn) {
            bottomPanelBtn.classList.remove('btn-outline-primary');
            bottomPanelBtn.classList.add('btn-primary');
        }
        if (sidePanelBtn) {
            sidePanelBtn.classList.remove('btn-primary');
            sidePanelBtn.classList.add('btn-outline-primary');
        }
        
        console.log('Switched to bottom panel view');
    }
    
    function switchToSidePanel() {
        const bottomPanelView = document.getElementById('bottomPanelView');
        const sidePanelView = document.getElementById('sidePanelView');
        const bottomPanelBtn = document.getElementById('bottomPanelBtn');
        const sidePanelBtn = document.getElementById('sidePanelBtn');
        
        if (bottomPanelView) bottomPanelView.style.display = 'none';
        if (sidePanelView) sidePanelView.style.display = 'block';
        
        // Update button states
        if (sidePanelBtn) {
            sidePanelBtn.classList.remove('btn-outline-primary');
            sidePanelBtn.classList.add('btn-primary');
        }
        if (bottomPanelBtn) {
            bottomPanelBtn.classList.remove('btn-primary');
            bottomPanelBtn.classList.add('btn-outline-primary');
        }
        
        // Load side panel view
        loadSidePanelView();
        
        console.log('Switched to side panel view');
    }
    
    function loadSidePanelView() {
        // Use the global currentAnalysisId from site.js
        if (!window.currentAnalysisId) {
            const sidePanelView = document.getElementById('sidePanelView');
            if (sidePanelView) {
                sidePanelView.innerHTML = '<div class="alert alert-warning">No analysis ID available for side-panel view</div>';
            }
            return;
        }
        
        // Show loading state
        const sidePanelView = document.getElementById('sidePanelView');
        if (sidePanelView) {
            sidePanelView.innerHTML =
                '<div class="alert alert-info">' +
                '<div class="d-flex align-items-center">' +
                '<div class="spinner-border spinner-border-sm me-2" role="status"></div>' +
                '<span>Loading side-panel view...</span>' +
                '</div>' +
                '</div>';
        }
        
        // Redirect to results page with the analysis ID
        window.location.href = `/results/${window.currentAnalysisId}`;
    }
    
    // Initialize view based on current state
    document.addEventListener('DOMContentLoaded', function() {
        // Only initialize if the view switching elements exist
        const analysisResultsSection = document.getElementById('analysisResultsSection');
        if (analysisResultsSection) {
            // Set initial state to bottom panel view
            switchToBottomPanel();
            
            // Hide the old analysis result section if it exists
            const oldResult = document.querySelector('.analysis-results pre');
            if (oldResult && oldResult.parentElement.parentElement.classList.contains('card')) {
                oldResult.parentElement.parentElement.parentElement.style.display = 'none';
            }
        }
    });
    
    // Function to dynamically inject the view-switching buttons
    function injectAnalysisButtons() {
        const container = document.getElementById('analysisButtonsContainer');
        const analysisId = document.getElementById('analysisResultsSection')?.dataset.analysisId;
        
        console.log('üîÑ injectAnalysisButtons called, analysisId:', analysisId);
        
        // If no analysis ID yet, don't inject (check for null, undefined, or empty string)
        if (!analysisId || analysisId === '') {
            console.log('‚ùå No analysisId found, skipping button injection');
            return;
        }

        // Prevent duplicate injection
        if (container.querySelector('#bottomPanelBtn')) {
            console.log('‚úÖ Buttons already injected, skipping');
            return;
        }

        console.log('üîß Creating analysis buttons...');

        // Create buttons
        const bottomBtn = document.createElement('button');
        bottomBtn.type = 'button';
        bottomBtn.className = 'btn btn-outline-primary';
        bottomBtn.id = 'bottomPanelBtn';
        bottomBtn.onclick = switchToBottomPanel;
        bottomBtn.textContent = 'üìã Bottom Panel';

        const sideBtn = document.createElement('button');
        sideBtn.type = 'button';
        sideBtn.className = 'btn btn-outline-primary';
        sideBtn.id = 'sidePanelBtn';
        sideBtn.onclick = switchToSidePanel;
        sideBtn.textContent = 'üîÄ Side Panel';

        // Clear container and append
        container.innerHTML = '';
        container.appendChild(bottomBtn);
        container.appendChild(sideBtn);

        // Initially set to bottom panel
        switchToBottomPanel();

        console.log('‚úÖ Analysis buttons injected dynamically');
    }
    
    // Only run if the section exists
    document.addEventListener('DOMContentLoaded', function() {
        const section = document.getElementById('analysisResultsSection');
        if (section) {
            console.log('‚úÖ analysisResultsSection found, injecting buttons...');
            injectAnalysisButtons();
            
            // Poll for new analysisId (in case it gets updated dynamically)
            setInterval(() => {
                const section = document.getElementById('analysisResultsSection');
                const analysisId = section?.dataset.analysisId;
                if (section && analysisId && analysisId !== '' && !section.querySelector('#bottomPanelBtn')) {
                    console.log('üîÑ Polling: Found valid analysisId, injecting buttons...');
                    injectAnalysisButtons();
                }
            }, 2000);
        } else {
            console.log('‚ÑπÔ∏è analysisResultsSection hidden - no analysis data available yet');
        }
    });
    
    // Make it globally available
    window.injectAnalysisButtons = injectAnalysisButtons;
    
    // Radio button change handler for analysis type
    document.addEventListener('DOMContentLoaded', function() {
        const uncommittedRadio = document.getElementById('uncommittedChanges');
        const commitRadio = document.getElementById('specificCommit');
        const singleFileRadio = document.getElementById('singleFile');
        const commitIdContainer = document.getElementById('commitIdContainer');
        const commitIdInput = document.getElementById('commitId');
        const filePickerContainer = document.getElementById('filePickerContainer');
        const filePathInput = document.getElementById('filePath');
        
        function toggleAnalysisTypeFields() {
            const gitDiffSection = document.getElementById('gitDiffSection');
            const commitAnalysisInfo = document.getElementById('commitAnalysisInfo');
            const singleFileAnalysisInfo = document.getElementById('singleFileAnalysisInfo');
            
            // Initialize on first call
            if (!gitDiffSection || !commitAnalysisInfo || !singleFileAnalysisInfo) {
                console.log('Elements not found, skipping toggle');
                return;
            }
            
            if (commitRadio.checked) {
                commitIdContainer.style.display = 'block';
                commitIdInput.required = true;
                filePickerContainer.style.display = 'none';
                filePathInput.required = false;
                
                // Hide git diff section and show commit analysis info
                gitDiffSection.style.display = 'none';
                commitAnalysisInfo.style.display = 'block';
                singleFileAnalysisInfo.style.display = 'none';
            } else if (singleFileRadio.checked) {
                commitIdContainer.style.display = 'none';
                commitIdInput.required = false;
                commitIdInput.value = '';
                document.getElementById('commitValidationResult').innerHTML = '';
                filePickerContainer.style.display = 'block';
                filePathInput.required = true;
                
                // Hide git diff section and show single file analysis info
                gitDiffSection.style.display = 'none';
                commitAnalysisInfo.style.display = 'none';
                singleFileAnalysisInfo.style.display = 'block';
            } else {
                commitIdContainer.style.display = 'none';
                commitIdInput.required = false;
                commitIdInput.value = '';
                document.getElementById('commitValidationResult').innerHTML = '';
                filePickerContainer.style.display = 'none';
                filePathInput.required = false;
                filePathInput.value = '';
                document.getElementById('fileValidationResult').innerHTML = '';
                
                // Show git diff section and hide analysis info
                gitDiffSection.style.display = 'block';
                commitAnalysisInfo.style.display = 'none';
                singleFileAnalysisInfo.style.display = 'none';
            }
        }
        
        // Initialize the UI state based on the default radio button selection
        toggleAnalysisTypeFields();
        
        uncommittedRadio.addEventListener('change', toggleAnalysisTypeFields);
        commitRadio.addEventListener('change', toggleAnalysisTypeFields);
        singleFileRadio.addEventListener('change', toggleAnalysisTypeFields);
        
        // Validate commit button handler
        document.getElementById('validateCommit').addEventListener('click', async function() {
            const commitId = commitIdInput.value.trim();
            const validationResult = document.getElementById('commitValidationResult');
            const repositoryPath = '@Html.Raw(ViewBag.RepositoryPath)';
            
            console.log('Validating commit:', commitId);
            console.log('Repository path:', repositoryPath);
            
            if (!commitId) {
                validationResult.innerHTML = '<span class="text-warning">Please enter a commit ID</span>';
                return;
            }
            
            validationResult.innerHTML = '<span class="text-info">Validating...</span>';
            
            try {
                const response = await fetch('/Home/ValidateCommit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        commitId: commitId,
                        repositoryPath: repositoryPath
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    validationResult.innerHTML = '<span class="text-success">‚úì Valid commit: ' + result.message + '</span>';
                } else {
                    validationResult.innerHTML = '<span class="text-danger">‚úó ' + result.error + '</span>';
                }
            } catch (error) {
                validationResult.innerHTML = '<span class="text-danger">‚úó Validation failed: ' + error.message + '</span>';
            }
        });

        // File validation function
        function validateFilePath(filePath) {
            const validationResult = document.getElementById('fileValidationResult');
            
            if (!filePath) {
                validationResult.innerHTML = '<span class="text-warning">Please select or enter a file path</span>';
                return false;
            }
            
            const allowedExtensions = ['.cs', '.js', '.py'];
            const extension = filePath.toLowerCase().substring(filePath.lastIndexOf('.'));
            
            if (!allowedExtensions.includes(extension)) {
                validationResult.innerHTML = '<span class="text-danger">‚úó Unsupported file type. Allowed: ' + allowedExtensions.join(', ') + '</span>';
                return false;
            }
            
            validationResult.innerHTML = '<span class="text-success">‚úì File type supported</span>';
            return true;
        }

        // File path input validation
        filePathInput.addEventListener('input', function() {
            const filePath = this.value.trim();
            if (filePath) {
                validateFilePath(filePath);
            } else {
                document.getElementById('fileValidationResult').innerHTML = '';
            }
        });

        // Browse file button handler - triggers hidden file input
        document.getElementById('browseFile').addEventListener('click', function() {
            document.getElementById('fileInput').click();
        });

        // Handle file selection from file input
        document.getElementById('fileInput').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file) {
                // Browsers don't provide full path for security reasons
                const fileNameOnly = file.name;
                
                // Clear the input and show a message to user
                filePathInput.value = '';
                
                // Store the file object for potential future use
                window.selectedFile = file;
                
                // Provide feedback about the selected file and instructions
                const validationResult = document.getElementById('fileValidationResult');
                validationResult.innerHTML = '<span class="text-info">üìÅ File selected: ' + file.name + ' (' + Math.round(file.size / 1024) + ' KB)</span><br>' +
                    '<span class="text-warning">‚ö†Ô∏è Please enter the full file path above (browsers don\'t provide full paths for security)</span>';
                
                // Focus on the file path input to encourage manual entry
                filePathInput.focus();
                
                console.log('[DEBUG] File selected via browser:', fileNameOnly);
                console.log('[DEBUG] User needs to manually enter full path');
            }
        });

        // Allow drag and drop for file selection (enhanced UX)
        filePathInput.addEventListener('dragover', function(event) {
            event.preventDefault();
            this.style.backgroundColor = '#f0f0f0';
            this.style.borderColor = '#007bff';
        });

        filePathInput.addEventListener('dragleave', function(event) {
            event.preventDefault();
            this.style.backgroundColor = '';
            this.style.borderColor = '';
        });

        filePathInput.addEventListener('drop', function(event) {
            event.preventDefault();
            this.style.backgroundColor = '';
            this.style.borderColor = '';
            
            const files = event.dataTransfer.files;
            if (files.length > 0) {
                const file = files[0];
                const fileNameOnly = file.name;
                
                // Clear the input and show a message to user
                this.value = '';
                
                // Store the file object for potential future use
                window.selectedFile = file;
                
                // Provide feedback about the selected file and instructions
                const validationResult = document.getElementById('fileValidationResult');
                validationResult.innerHTML = '<span class="text-info">üìÅ File dropped: ' + file.name + ' (' + Math.round(file.size / 1024) + ' KB)</span><br>' +
                    '<span class="text-warning">‚ö†Ô∏è Please enter the full file path above (drag & drop only provides filename)</span>';
                
                // Focus on the file path input to encourage manual entry
                this.focus();
                
                console.log('[DEBUG] File dropped via drag & drop:', fileNameOnly);
                console.log('[DEBUG] User needs to manually enter full path');
            }
        });
    });

    // Function to toggle language selector
    function toggleLanguageSelector() {
        const dropdown = document.getElementById('languageDropdown');
        dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
    }

    // Function to toggle standards selector (document management)
    function toggleStandardsSelector() {
        const dropdown = document.getElementById('standardsDropdown');
        dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
    }

    // Update display when selection changes
    document.getElementById('languageSelect').addEventListener('change', function() {
        document.getElementById('languageValue').textContent =
            this.value === 'NET' ? 'C# (.NET)' : 'Python';
        document.getElementById('languageDropdown').style.display = 'none';
    });
</script>
