@{
    ViewData["Title"] = "AI Code Reviewer";
}

@section Styles {
    <style>
        /* === BASE STYLES === */
        :root {
            --bg-primary: #0f0f14;
            --bg-card: #252536;
            --text-primary: #e0e0e0;
            --text-secondary: #a0a0b0;
            --accent: #007bff;
            --success: #28a745;
            --border: #3a3a4d;
            --shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
            --transition: all 0.2s ease;
        }

        /* Override body styles for this page */
        body {
            background-color: var(--bg-primary);
            color: var(--text-primary);
            font-family: 'Segoe UI', sans-serif;
            padding: 32px;
            line-height: 1.6;
        }

        .container {
            max-width: 1100px;
            margin: 0 auto;
        }

        /* === STATUS BAR === */
        .status-bar {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 16px;
            background-color: #1a1a26;
            border-radius: 8px;
            margin-bottom: 24px;
            border: 1px solid var(--border);
        }

        .status-icon {
            font-size: 18px;
        }

        .status-text strong {
            color: var(--text-primary);
        }

        .status-text span {
            color: var(--text-secondary);
        }

        /* === HORIZONTAL SETUP FLOW === */
        .setup-flow {
            display: flex;
            gap: 12px;
            margin-bottom: 24px;
            overflow-x: auto;
            padding: 8px 0;
            background-color: #1a1a26;
            border-radius: 8px;
            border: 1px solid var(--border);
            box-shadow: var(--shadow);
            scroll-snap-type: x mandatory;
        }

        .flow-item {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 16px;
            background-color: transparent;
            border: 1px solid transparent;
            border-radius: 6px;
            cursor: pointer;
            transition: var(--transition);
            min-width: 150px;
            flex-shrink: 0;
            position: relative;
        }

            .flow-item:hover,
            .flow-item:focus-within {
                background-color: rgba(0, 123, 255, 0.1);
                border-color: var(--accent);
                outline: none;
                box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
            }

            .flow-item:focus-visible {
                outline: 2px solid var(--accent);
                outline-offset: 2px;
            }

        .icon {
            font-size: 16px;
            color: var(--text-primary);
        }

        .value {
            font-size: 14px;
            color: var(--text-primary);
            word-break: break-word;
            max-width: 100px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .edit-icon {
            font-size: 14px;
            color: var(--text-secondary);
            margin-left: auto; /* Push to right */
        }

        .btn-run {
            padding: 12px 24px;
            font-size: 14px;
            font-weight: 600;
            background-color: var(--accent);
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: var(--transition);
            min-width: 160px;
            flex-shrink: 0;
            box-shadow: 0 2px 8px rgba(0, 123, 255, 0.3);
        }

            .btn-run:hover {
                background-color: #0056b3;
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(0, 123, 255, 0.4);
            }

            .btn-run:active {
                transform: translateY(0);
            }

        /* === CARD === */
        .card {
            background-color: var(--bg-card);
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 24px;
            border: 1px solid var(--border);
            box-shadow: var(--shadow);
        }

        .card-header {
            margin-bottom: 16px;
        }

        .card-body {
            padding: 0;
        }

        /* === GIT DIFF === */
        .git-diff-text {
            font-family: 'Consolas', monospace;
            font-size: 12px;
            color: #a0c8ff;
            white-space: pre-wrap;
            overflow-x: auto;
            border: 1px solid var(--border);
            border-radius: 6px;
            padding: 16px;
            background-color: #1a1a26;
            margin: 0;
        }

        /* === AI ANALYSIS INFO === */
        .ai-analysis-info {
            background-color: rgba(23, 162, 184, 0.1);
            border-left: 4px solid #17a2b8;
            padding: 16px 24px;
            margin: 24px 0;
            border-radius: 0 8px 8px 0;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .info-icon {
            color: #17a2b8;
            font-size: 18px;
        }

        .info-content strong {
            color: var(--text-primary);
        }

        .info-content span {
            color: var(--text-secondary);
        }

        /* === ACCESSIBILITY & INTERACTION === */
        /* Ensure focus indicators are visible */
        *:focus-visible {
            outline: 2px solid var(--accent);
            outline-offset: 2px;
        }

        /* Prevent focus ring on edit icons (decorative) */
        .edit-icon {
            pointer-events: none;
        }

        /* Reduce motion support */
        @@media (prefers-reduced-motion: reduce) {
            * {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }

            .flow-item:hover,
            .btn-run:hover {
                transform: none !important;
                box-shadow: none !important;
            }
        }

        /* --- HIDDEN FORM ELEMENTS --- */
        /* These are not visible, but required for site.js */
        #analysisForm, #progressContainer, #analysisResult { display: none; }
        #analysisForm input, #analysisForm select, #analysisForm label { display: none; }
        #analysisForm input[type="checkbox"], #analysisForm input[type="radio"] { display: none; }
        #directoryBrowserModal { display: none; } /* Will be shown by site.js */
    </style>
}

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        // Rename the inline startAnalysis function to avoid conflicts with site.js
        document.addEventListener('DOMContentLoaded', function() {
            // Store reference to the inline startAnalysis function
            const inlineStartAnalysis = window.startAnalysis;
            
            // Rename it to avoid conflicts with site.js
            window.inlineStartAnalysis = inlineStartAnalysis;
            
            // Remove the original to prevent conflicts
            delete window.startAnalysis;
        });
    </script>
}

<div class="container">
    <!-- Status Bar -->
    <div class="status-bar">
        <span class="status-icon">üåø</span>
        <div class="status-text">
            <strong>Current Branch</strong>
            <span>@(ViewBag.BranchInfo ?? "Unknown")</span>
        </div>
    </div>

    <!-- Horizontal Setup Flow -->
    <div class="setup-flow" role="group" aria-label="Configuration Steps">
        <!-- Language -->
        <div class="flow-item" 
             onclick="openLanguageSelector()" 
             tabindex="0" 
             aria-label="Select programming language (current: @(ViewBag.Language ?? "Not set"))">
            <span class="icon">‚öôÔ∏è</span>
            <span class="value">@Html.Raw(ViewBag.Language ?? "<em>Select language</em>")</span>
            <span class="edit-icon" aria-hidden="true">‚úèÔ∏è</span>
        </div>

        <!-- Standards -->
        <div class="flow-item"
             onclick="openStandardsSelector()"
             tabindex="0"
             aria-label="Upload coding standards (@(ViewBag.SelectedDocuments is List<string> selectedDocs && selectedDocs.Any() ? $"{selectedDocs.Count} documents selected" : "No documents selected"))">
            <span class="icon">üìÑ</span>
            <span class="value">
                @{
                    var selectedDocuments = ViewBag.SelectedDocuments as List<string>;
                    if (selectedDocuments != null && selectedDocuments.Any())
                    {
                        @string.Join(", ", selectedDocuments.Select(d => DocumentService.GetDocumentDisplayName(d)))
                    }
                    else
                    {
                        <text><em>No documents selected</em></text>
                    }
                }
            </span>
            <span class="edit-icon" aria-hidden="true">‚úèÔ∏è</span>
        </div>
        
        <!-- Repository -->
        <div class="flow-item" 
             onclick="openRepoSelector()" 
             tabindex="0" 
             aria-label="Select project repository (current path: @(ViewBag.RepositoryPath ?? "Not set"))">
            <span class="icon">üìÅ</span>
            <span class="value">
                @{
                    var repoPath = ViewBag.RepositoryPath as string;
                    if (!string.IsNullOrEmpty(repoPath))
                    {
                        if (repoPath.Length > 20)
                        {
                            @($"{repoPath.Substring(0, 17)}...")
                        }
                        else
                        {
                            @repoPath
                        }
                    }
                    else
                    {
                        <text><em>No repository selected</em></text>
                    }
                }
            </span>
            <span class="edit-icon" aria-hidden="true">‚úèÔ∏è</span>
        </div>

        <!-- Analysis Type -->
        <div class="flow-item" 
             onclick="openAnalysisTypeSelector()" 
             tabindex="0" 
             aria-label="Choose analysis type (current: @(ViewBag.AnalysisType ?? "Not set"))">
            <span class="icon">üîç</span>
            <span class="value">@Html.Raw(ViewBag.AnalysisType ?? "<em>Select analysis type</em>")</span>
            <span class="edit-icon" aria-hidden="true">‚úèÔ∏è</span>
        </div>

        <!-- Run Analysis -->
        <button class="btn btn-primary btn-run" 
                onclick="startAnalysis()" 
                tabindex="0" 
                aria-label="Start AI code analysis">
            üöÄ Run AI Analysis
        </button>
    </div>

    <!-- Git Diff Preview (Collapsible) -->
    <div class="card">
        <div class="card-header">
            <button class="btn btn-link" 
                    data-bs-toggle="collapse" 
                    data-bs-target="#gitDiffCollapse" 
                    aria-expanded="false" 
                    aria-controls="gitDiffCollapse">
                üìä Git Changes (Click to expand/collapse)
            </button>
        </div>
        <div class="card-body collapse" id="gitDiffCollapse">
            <pre class="git-diff-text">@Html.Raw(ViewBag.GitDiff ?? "<em>No changes detected</em>")</pre>
        </div>
    </div>

    <!-- AI Code Analysis Info -->
    <div class="ai-analysis-info" role="status" aria-live="polite">
        <span class="info-icon">‚ÑπÔ∏è</span>
        <div class="info-content">
            <strong>AI Analysis Ready</strong>
            <span>Select coding standards and configure your repository to begin analysis</span>
        </div>
    </div>

    <!-- ‚¨áÔ∏è HIDDEN FORM FIELDS FOR site.js ‚Äî VISIBLE TO JAVASCRIPT ONLY -->
    <form id="analysisForm" style="display: none;">
        <!-- Repository Path -->
        <input type="text" name="repositoryPath" id="repositoryPathInput" value="@ViewBag.RepositoryPath" />

        <!-- Language Selection -->
        <select id="languageSelect" class="form-select">
            <option value="NET" asp-selected="@(ViewBag.Language == "NET")">C# (.NET)</option>
            <option value="JS" asp-selected="@(ViewBag.Language == "JS")">JavaScript</option>
            <option value="PY" asp-selected="@(ViewBag.Language == "PY")">Python</option>
        </select>


        <!-- Analysis Type -->
        <div id="analysisTypeGroup">
            <input type="radio" name="analysisType" id="analysisTypeUncommitted" value="uncommitted" @(ViewBag.AnalysisType == "uncommitted" ? "checked" : "") />
            <label for="analysisTypeUncommitted">Uncommitted Changes</label>

            <input type="radio" name="analysisType" id="analysisTypeCommit" value="commit" @(ViewBag.AnalysisType == "commit" ? "checked" : "") />
            <label for="analysisTypeCommit">Specific Commit</label>

            <input type="radio" name="analysisType" id="analysisTypeSingleFile" value="singlefile" @(ViewBag.AnalysisType == "singlefile" ? "checked" : "") />
            <label for="analysisTypeSingleFile">Single File</label>
        </div>

        <!-- Selected Documents (Checkboxes) -->
        @{
            var availableDocs = ViewBag.AvailableDocuments as List<string>;
            var selectedDocs = ViewBag.SelectedDocuments as List<string>;
            
            if (availableDocs != null)
            {
                foreach (var doc in availableDocs)
                {
                    var isSelected = selectedDocs != null && selectedDocs.Contains(doc);
                    <input type="checkbox" name="selectedDocuments" value="@doc" checked="@isSelected" />
                }
            }
        }

        <!-- Optional Fields for Commit/File Analysis -->
        <input type="text" id="commitId" name="commitId" value="" />
        <input type="text" id="filePath" name="filePath" value="" />
    </form>

    <!-- Progress Container (for site.js) -->
    <div id="progressContainer" style="display: none;">
        <div id="progressMessage">Processing...</div>
    </div>

    <!-- Result Card (for site.js) -->
    <div id="analysisResult" style="display: none;">
        <div id="result"></div>
    </div>

    <!-- Directory Browser Modal (if used by site.js) -->
    <div class="modal fade" id="directoryBrowserModal" tabindex="-1" aria-labelledby="directoryBrowserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="directoryBrowserModalLabel">Browse Directories</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <input type="text" id="currentDirectoryPath" class="form-control" readonly />
                    </div>
                    <div id="directoryBrowserLoading" class="text-center py-4" style="display: none;">
                        Loading...
                    </div>
                    <div id="directoryBrowserError" class="alert alert-danger d-none"></div>
                    <div id="directoryBrowserContent"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="navigateToParent()">‚¨ÜÔ∏è Parent</button>
                    <button type="button" class="btn btn-primary" onclick="selectCurrentDirectory()">Select Folder</button>
                </div>
            </div>
        </div>
    </div>

</div>

<script>
    function openLanguageSelector() {
        // Create and show a modal for language selection
        const modal = createLanguageModal();
        document.body.appendChild(modal);
        
        const bootstrapModal = new bootstrap.Modal(modal);
        bootstrapModal.show();
        
        // Clean up modal after it's hidden
        modal.addEventListener('hidden.bs.modal', function() {
            modal.remove();
        });
    }
    
    function createLanguageModal() {
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.id = 'languageSelectorModal';
        modal.innerHTML = `
            <div class="modal-dialog modal-sm">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Select Programming Language</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="list-group">
                            <button type="button" class="list-group-item list-group-item-action" onclick="selectLanguage('NET')">
                                <i class="fab fa-microsoft"></i> C# (.NET)
                            </button>
                            <button type="button" class="list-group-item list-group-item-action" onclick="selectLanguage('JS')">
                                <i class="fab fa-js"></i> JavaScript
                            </button>
                            <button type="button" class="list-group-item list-group-item-action" onclick="selectLanguage('PY')">
                                <i class="fab fa-python"></i> Python
                            </button>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        `;
        return modal;
    }
    
    function selectLanguage(language) {
        // Update the language select dropdown
        const languageSelect = document.getElementById('languageSelect');
        if (languageSelect) {
            languageSelect.value = language;
        }
        
        // Update the UI to show selected language
        const languageElement = document.querySelector('.flow-item[onclick="openLanguageSelector()"] .value');
        if (languageElement) {
            const languageNames = {
                'NET': 'C# (.NET)',
                'JS': 'JavaScript',
                'PY': 'Python'
            };
            languageElement.innerHTML = languageNames[language] || 'Select language';
        }
        
        // Close the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('languageSelectorModal'));
        if (modal) {
            modal.hide();
        }
    }
    
    function openStandardsSelector() {
        // Create and show a modal for standards selection
        const modal = createStandardsModal();
        document.body.appendChild(modal);
        
        const bootstrapModal = new bootstrap.Modal(modal);
        bootstrapModal.show();
        
        // Clean up modal after it's hidden
        modal.addEventListener('hidden.bs.modal', function() {
            modal.remove();
        });
    }
    
    function createStandardsModal() {
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.id = 'standardsSelectorModal';
        
        // Get current document selections
        const selectedDocs = Array.from(document.querySelectorAll('input[name="selectedDocuments"]:checked'))
            .map(cb => cb.value);
        
        modal.innerHTML = `
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Select Coding Standards</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Choose coding standards documents:</label>
                            <div id="standardsList" class="list-group">
                                <!-- Standards will be populated here -->
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="applyStandardsSelection()">Apply Selection</button>
                    </div>
                </div>
            </div>
        `;
        
        // Populate standards list
        setTimeout(() => {
            populateStandardsList(selectedDocs);
        }, 100);
        
        return modal;
    }
    
    function populateStandardsList(selectedDocs) {
        const standardsList = document.getElementById('standardsList');
        if (!standardsList) return;
        
        // Get available documents from the hidden checkboxes
        const checkboxes = document.querySelectorAll('input[name="selectedDocuments"]');
        const documentOptions = Array.from(checkboxes).map(cb => ({
            value: cb.value,
            displayName: cb.value.replace(/[-_]/g, ' '),
            isSelected: selectedDocs.includes(cb.value)
        }));
        
        if (documentOptions.length === 0) {
            standardsList.innerHTML = `
                <div class="text-center text-muted p-4">
                    <i class="fas fa-file-alt fa-3x mb-3"></i>
                    <h5>No coding standards available</h5>
                    <p>Please select a documents folder containing .md files</p>
                    <button type="button" class="btn btn-primary btn-sm" onclick="openDocumentsFolderSelector()">
                        <i class="fas fa-folder-open me-2"></i>Select Documents Folder
                    </button>
                </div>
            `;
            return;
        }
        
        // Show current documents folder info
        const currentFolder = '@(ViewBag.DocumentsFolder ?? "Default")';
        const folderInfo = `
            <div class="alert alert-info mb-3">
                <div class="d-flex align-items-center">
                    <i class="fas fa-info-circle me-2"></i>
                    <div>
                        <strong>Documents Folder:</strong> ${currentFolder}
                        <br>
                        <small class="text-muted">Found ${documentOptions.length} coding standards document${documentOptions.length > 1 ? 's' : ''}</small>
                    </div>
                </div>
                <button type="button" class="btn btn-sm btn-outline-primary mt-2" onclick="openDocumentsFolderSelector()">
                    <i class="fas fa-folder-open me-1"></i>Change Folder
                </button>
            </div>
        `;
        
        const documentList = documentOptions.map(doc => `
            <label class="list-group-item d-flex align-items-center">
                <input type="checkbox" class="form-check-input me-3" value="${doc.value}" ${doc.isSelected ? 'checked' : ''}>
                <div class="flex-grow-1">
                    <div class="fw-bold">${doc.displayName}</div>
                    <small class="text-muted">${doc.value}</small>
                </div>
                ${doc.isSelected ? '<span class="badge bg-primary ms-auto">Selected</span>' : ''}
            </label>
        `).join('');
        
        standardsList.innerHTML = folderInfo + documentList;
    }
    
    function applyStandardsSelection() {
        // Get selected items from modal
        const selectedInModal = Array.from(document.querySelectorAll('#standardsList input[type="checkbox"]:checked'))
            .map(cb => cb.value);
        
        // Update hidden checkboxes
        const hiddenCheckboxes = document.querySelectorAll('input[name="selectedDocuments"]');
        hiddenCheckboxes.forEach(cb => {
            cb.checked = selectedInModal.includes(cb.value);
        });
        
        // Update UI to show selection count
        const count = selectedInModal.length;
        const standardsElement = document.querySelector('.flow-item[onclick="openStandardsSelector()"] .value');
        if (standardsElement) {
            standardsElement.innerHTML = count > 0
                ? `${count} document${count > 1 ? 's' : ''} selected`
                : '<em>No documents selected</em>';
        }
        
        // Close the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('standardsSelectorModal'));
        if (modal) {
            modal.hide();
        }
    }
    
    function openDocumentsFolderSelector() {
        // Create and show a modal for documents folder selection
        const modal = createDocumentsFolderModal();
        document.body.appendChild(modal);
        
        const bootstrapModal = new bootstrap.Modal(modal);
        bootstrapModal.show();
        
        // Clean up modal after it's hidden
        modal.addEventListener('hidden.bs.modal', function() {
            modal.remove();
        });
    }
    
    function createDocumentsFolderModal() {
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.id = 'documentsFolderModal';
        
        const currentFolder = '@(ViewBag.DocumentsFolder ?? "")';
        
        modal.innerHTML = `
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Select Documents Folder</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Current folder:</label>
                            <input type="text" class="form-control" value="${currentFolder}" readonly />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Choose a new documents folder:</label>
                            <div class="input-group">
                                <input type="text" id="newDocumentsFolder" class="form-control" placeholder="Enter folder path or browse..." />
                                <button class="btn btn-outline-secondary" type="button" onclick="browseForDocumentsFolder()">Browse</button>
                            </div>
                            <div class="form-text">Select a folder containing your coding standards documents (.md files)</div>
                        </div>
                        <div id="documentsFolderPreview" class="mt-3" style="display: none;">
                            <h6>Found Documents:</h6>
                            <div id="documentsList" class="list-group"></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="applyDocumentsFolderSelection()">Apply Selection</button>
                    </div>
                </div>
            </div>
        `;
        
        // Add event listener for folder path input
        setTimeout(() => {
            const folderInput = document.getElementById('newDocumentsFolder');
            if (folderInput) {
                folderInput.addEventListener('input', debounce(scanDocumentsFolder, 500));
            }
        }, 100);
        
        return modal;
    }
    
    function browseForDocumentsFolder() {
        // Use the same directory browser as repository selection
        openDirectoryBrowser();
        
        // Override the select function to use it for documents folder
        const originalSelectFunction = window.selectCurrentDirectory;
        window.selectCurrentDirectory = function() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('directoryBrowserModal'));
            if (modal) {
                modal.hide();
            }
            
            const newPath = document.getElementById('currentDirectoryPath').value;
            document.getElementById('newDocumentsFolder').value = newPath;
            scanDocumentsFolder();
            
            // Restore original function
            window.selectCurrentDirectory = originalSelectFunction;
        };
        
        // Update modal title
        setTimeout(() => {
            const title = document.getElementById('directoryBrowserModalLabel');
            if (title) {
                title.textContent = 'Select Documents Folder';
            }
        }, 100);
    }
    
    function scanDocumentsFolder() {
        const folderPath = document.getElementById('newDocumentsFolder').value;
        const previewDiv = document.getElementById('documentsFolderPreview');
        const listDiv = document.getElementById('documentsList');
        
        if (!folderPath) {
            previewDiv.style.display = 'none';
            return;
        }
        
        // Show loading state
        listDiv.innerHTML = '<div class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div> Scanning folder...</div>';
        previewDiv.style.display = 'block';
        
        // Call API to scan documents folder
        fetch('/Home/ScanDocumentsFolder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ folderPath: folderPath })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Display found documents
                const documents = data.documents || [];
                if (documents.length > 0) {
                    listDiv.innerHTML = documents.map(doc =>
                        `<div class="list-group-item">
                            <i class="fas fa-file-alt me-2"></i>
                            ${doc.replace(/[-_]/g, ' ')}
                        </div>`
                    ).join('');
                } else {
                    listDiv.innerHTML = '<div class="text-muted">No .md documents found in this folder</div>';
                }
            } else {
                listDiv.innerHTML = `<div class="alert alert-danger">${data.error || 'Error scanning folder'}</div>`;
            }
        })
        .catch(error => {
            listDiv.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
        });
    }
    
    function applyDocumentsFolderSelection() {
        const newPath = document.getElementById('newDocumentsFolder').value;
        if (!newPath) {
            alert('Please enter a folder path');
            return;
        }
        
        // Submit the form to update the documents folder
        fetch('/Home/SetDocumentsFolder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `folderPath=${encodeURIComponent(newPath)}`
        })
        .then(response => {
            if (response.ok) {
                // Close modal and reload page to show updated documents
                const modal = bootstrap.Modal.getInstance(document.getElementById('documentsFolderModal'));
                if (modal) {
                    modal.hide();
                }
                window.location.reload();
            } else {
                alert('Error updating documents folder');
            }
        })
        .catch(error => {
            alert('Error: ' + error.message);
        });
    }
    
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    function openRepoSelector() {
        // Open directory browser modal
        openDirectoryBrowser();
    }
    
    function openAnalysisTypeSelector() {
        // Create and show a modal for analysis type selection
        const modal = createAnalysisTypeModal();
        document.body.appendChild(modal);
        
        const bootstrapModal = new bootstrap.Modal(modal);
        bootstrapModal.show();
        
        // Clean up modal after it's hidden
        modal.addEventListener('hidden.bs.modal', function() {
            modal.remove();
        });
    }
    
    function createAnalysisTypeModal() {
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.id = 'analysisTypeSelectorModal';
        
        // Get current selection
        const currentSelection = document.querySelector('input[name="analysisType"]:checked')?.value || 'uncommitted';
        
        modal.innerHTML = `
            <div class="modal-dialog modal-md">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Choose Analysis Type</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="list-group">
                            <label class="list-group-item">
                                <input type="radio" class="form-check-input me-2" name="modalAnalysisType" value="uncommitted" ${currentSelection === 'uncommitted' ? 'checked' : ''}>
                                <div>
                                    <strong>Uncommitted Changes</strong>
                                    <small class="d-block text-muted">Analyze changes that haven't been committed yet</small>
                                </div>
                            </label>
                            <label class="list-group-item">
                                <input type="radio" class="form-check-input me-2" name="modalAnalysisType" value="commit" ${currentSelection === 'commit' ? 'checked' : ''}>
                                <div>
                                    <strong>Specific Commit</strong>
                                    <small class="d-block text-muted">Analyze a specific commit by ID</small>
                                </div>
                            </label>
                            <label class="list-group-item">
                                <input type="radio" class="form-check-input me-2" name="modalAnalysisType" value="singlefile" ${currentSelection === 'singlefile' ? 'checked' : ''}>
                                <div>
                                    <strong>Single File</strong>
                                    <small class="d-block text-muted">Analyze a specific file</small>
                                </div>
                            </label>
                        </div>
                        
                        <!-- Optional fields that show based on selection -->
                        <div id="modalOptionalFields" class="mt-3" style="display: none;">
                            <div class="mb-3">
                                <label for="modalCommitId" class="form-label">Commit ID:</label>
                                <input type="text" class="form-control" id="modalCommitId" placeholder="Enter commit hash">
                            </div>
                            <div class="mb-3">
                                <label for="modalFilePath" class="form-label">File Path:</label>
                                <input type="text" class="form-control" id="modalFilePath" placeholder="Enter file path">
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="applyAnalysisTypeSelection()">Apply Selection</button>
                    </div>
                </div>
            </div>
        `;
        
        // Add event listeners for radio buttons
        setTimeout(() => {
            const radioButtons = modal.querySelectorAll('input[name="modalAnalysisType"]');
            radioButtons.forEach(radio => {
                radio.addEventListener('change', handleModalAnalysisTypeChange);
            });
            handleModalAnalysisTypeChange(); // Initial call
        }, 100);
        
        return modal;
    }
    
    function handleModalAnalysisTypeChange() {
        const selectedType = document.querySelector('input[name="modalAnalysisType"]:checked')?.value;
        const optionalFields = document.getElementById('modalOptionalFields');
        const commitIdInput = document.getElementById('modalCommitId');
        const filePathInput = document.getElementById('modalFilePath');
        
        if (selectedType === 'commit' || selectedType === 'singlefile') {
            optionalFields.style.display = 'block';
            if (selectedType === 'commit') {
                commitIdInput.disabled = false;
                filePathInput.disabled = true;
                commitIdInput.placeholder = 'Enter commit hash (e.g., abc123)';
                filePathInput.value = '';
            } else if (selectedType === 'singlefile') {
                commitIdInput.disabled = true;
                filePathInput.disabled = false;
                commitIdInput.value = '';
                filePathInput.placeholder = 'Enter file path (e.g., src/app.js)';
            }
        } else {
            optionalFields.style.display = 'none';
            commitIdInput.disabled = true;
            filePathInput.disabled = true;
            commitIdInput.value = '';
            filePathInput.value = '';
        }
    }
    
    function applyAnalysisTypeSelection() {
        const selectedType = document.querySelector('input[name="modalAnalysisType"]:checked')?.value || 'uncommitted';
        const commitId = document.getElementById('modalCommitId')?.value || '';
        const filePath = document.getElementById('modalFilePath')?.value || '';
        
        // Update hidden radio buttons
        const hiddenRadios = document.querySelectorAll('input[name="analysisType"]');
        hiddenRadios.forEach(radio => {
            radio.checked = radio.value === selectedType;
        });
        
        // Update optional fields
        const hiddenCommitId = document.getElementById('commitId');
        const hiddenFilePath = document.getElementById('filePath');
        if (hiddenCommitId) hiddenCommitId.value = commitId;
        if (hiddenFilePath) hiddenFilePath.value = filePath;
        
        // Update UI to show selection
        const typeNames = {
            'uncommitted': 'Uncommitted Changes',
            'commit': 'Specific Commit',
            'singlefile': 'Single File'
        };
        
        const analysisTypeElement = document.querySelector('.flow-item[onclick="openAnalysisTypeSelector()"] .value');
        if (analysisTypeElement) {
            let displayText = typeNames[selectedType] || 'Select analysis type';
            if (selectedType === 'commit' && commitId) {
                displayText += ` (${commitId.substring(0, 7)})`;
            } else if (selectedType === 'singlefile' && filePath) {
                displayText += ` (${filePath.split('/').pop()})`;
            }
            analysisTypeElement.innerHTML = displayText;
        }
        
        // Close the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('analysisTypeSelectorModal'));
        if (modal) {
            modal.hide();
        }
    }
    
    function startAnalysis() {
        // Call the site.js startAnalysis function
        if (typeof window.startAnalysis === 'function') {
            window.startAnalysis();
        } else {
            console.error('startAnalysis function from site.js not found');
            alert('Analysis function not available. Please refresh the page.');
        }
    }
</script>